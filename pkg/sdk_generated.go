// Code generated by MockGen. DO NOT EDIT.
// Source: ../sdk/api_default.go
//
// Generated by this command:
//
//	mockgen -typed -source=../sdk/api_default.go -destination=sdk_generated.go -package=pkg . DefaultAPI
//

// Package pkg is a generated GoMock package.
package pkg

import (
	context "context"
	http "net/http"
	reflect "reflect"

	sdk "github.com/formancehq/terraform-provider-cloud/sdk"
	gomock "go.uber.org/mock/gomock"
)

// MockDefaultAPI is a mock of DefaultAPI interface.
type MockDefaultAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultAPIMockRecorder
	isgomock struct{}
}

// MockDefaultAPIMockRecorder is the mock recorder for MockDefaultAPI.
type MockDefaultAPIMockRecorder struct {
	mock *MockDefaultAPI
}

// NewMockDefaultAPI creates a new mock instance.
func NewMockDefaultAPI(ctrl *gomock.Controller) *MockDefaultAPI {
	mock := &MockDefaultAPI{ctrl: ctrl}
	mock.recorder = &MockDefaultAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultAPI) EXPECT() *MockDefaultAPIMockRecorder {
	return m.recorder
}

// AcceptInvitation mocks base method.
func (m *MockDefaultAPI) AcceptInvitation(ctx context.Context, invitationId string) sdk.ApiAcceptInvitationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitation", ctx, invitationId)
	ret0, _ := ret[0].(sdk.ApiAcceptInvitationRequest)
	return ret0
}

// AcceptInvitation indicates an expected call of AcceptInvitation.
func (mr *MockDefaultAPIMockRecorder) AcceptInvitation(ctx, invitationId any) *MockDefaultAPIAcceptInvitationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitation", reflect.TypeOf((*MockDefaultAPI)(nil).AcceptInvitation), ctx, invitationId)
	return &MockDefaultAPIAcceptInvitationCall{Call: call}
}

// MockDefaultAPIAcceptInvitationCall wrap *gomock.Call
type MockDefaultAPIAcceptInvitationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIAcceptInvitationCall) Return(arg0 sdk.ApiAcceptInvitationRequest) *MockDefaultAPIAcceptInvitationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIAcceptInvitationCall) Do(f func(context.Context, string) sdk.ApiAcceptInvitationRequest) *MockDefaultAPIAcceptInvitationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIAcceptInvitationCall) DoAndReturn(f func(context.Context, string) sdk.ApiAcceptInvitationRequest) *MockDefaultAPIAcceptInvitationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AcceptInvitationExecute mocks base method.
func (m *MockDefaultAPI) AcceptInvitationExecute(r sdk.ApiAcceptInvitationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitationExecute indicates an expected call of AcceptInvitationExecute.
func (mr *MockDefaultAPIMockRecorder) AcceptInvitationExecute(r any) *MockDefaultAPIAcceptInvitationExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).AcceptInvitationExecute), r)
	return &MockDefaultAPIAcceptInvitationExecuteCall{Call: call}
}

// MockDefaultAPIAcceptInvitationExecuteCall wrap *gomock.Call
type MockDefaultAPIAcceptInvitationExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIAcceptInvitationExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIAcceptInvitationExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIAcceptInvitationExecuteCall) Do(f func(sdk.ApiAcceptInvitationRequest) (*http.Response, error)) *MockDefaultAPIAcceptInvitationExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIAcceptInvitationExecuteCall) DoAndReturn(f func(sdk.ApiAcceptInvitationRequest) (*http.Response, error)) *MockDefaultAPIAcceptInvitationExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddFeatures mocks base method.
func (m *MockDefaultAPI) AddFeatures(ctx context.Context, organizationId string) sdk.ApiAddFeaturesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFeatures", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiAddFeaturesRequest)
	return ret0
}

// AddFeatures indicates an expected call of AddFeatures.
func (mr *MockDefaultAPIMockRecorder) AddFeatures(ctx, organizationId any) *MockDefaultAPIAddFeaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeatures", reflect.TypeOf((*MockDefaultAPI)(nil).AddFeatures), ctx, organizationId)
	return &MockDefaultAPIAddFeaturesCall{Call: call}
}

// MockDefaultAPIAddFeaturesCall wrap *gomock.Call
type MockDefaultAPIAddFeaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIAddFeaturesCall) Return(arg0 sdk.ApiAddFeaturesRequest) *MockDefaultAPIAddFeaturesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIAddFeaturesCall) Do(f func(context.Context, string) sdk.ApiAddFeaturesRequest) *MockDefaultAPIAddFeaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIAddFeaturesCall) DoAndReturn(f func(context.Context, string) sdk.ApiAddFeaturesRequest) *MockDefaultAPIAddFeaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddFeaturesExecute mocks base method.
func (m *MockDefaultAPI) AddFeaturesExecute(r sdk.ApiAddFeaturesRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFeaturesExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFeaturesExecute indicates an expected call of AddFeaturesExecute.
func (mr *MockDefaultAPIMockRecorder) AddFeaturesExecute(r any) *MockDefaultAPIAddFeaturesExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeaturesExecute", reflect.TypeOf((*MockDefaultAPI)(nil).AddFeaturesExecute), r)
	return &MockDefaultAPIAddFeaturesExecuteCall{Call: call}
}

// MockDefaultAPIAddFeaturesExecuteCall wrap *gomock.Call
type MockDefaultAPIAddFeaturesExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIAddFeaturesExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIAddFeaturesExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIAddFeaturesExecuteCall) Do(f func(sdk.ApiAddFeaturesRequest) (*http.Response, error)) *MockDefaultAPIAddFeaturesExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIAddFeaturesExecuteCall) DoAndReturn(f func(sdk.ApiAddFeaturesRequest) (*http.Response, error)) *MockDefaultAPIAddFeaturesExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateInvitation mocks base method.
func (m *MockDefaultAPI) CreateInvitation(ctx context.Context, organizationId string) sdk.ApiCreateInvitationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitation", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiCreateInvitationRequest)
	return ret0
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockDefaultAPIMockRecorder) CreateInvitation(ctx, organizationId any) *MockDefaultAPICreateInvitationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockDefaultAPI)(nil).CreateInvitation), ctx, organizationId)
	return &MockDefaultAPICreateInvitationCall{Call: call}
}

// MockDefaultAPICreateInvitationCall wrap *gomock.Call
type MockDefaultAPICreateInvitationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPICreateInvitationCall) Return(arg0 sdk.ApiCreateInvitationRequest) *MockDefaultAPICreateInvitationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPICreateInvitationCall) Do(f func(context.Context, string) sdk.ApiCreateInvitationRequest) *MockDefaultAPICreateInvitationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPICreateInvitationCall) DoAndReturn(f func(context.Context, string) sdk.ApiCreateInvitationRequest) *MockDefaultAPICreateInvitationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateInvitationExecute mocks base method.
func (m *MockDefaultAPI) CreateInvitationExecute(r sdk.ApiCreateInvitationRequest) (*sdk.CreateInvitationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitationExecute", r)
	ret0, _ := ret[0].(*sdk.CreateInvitationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateInvitationExecute indicates an expected call of CreateInvitationExecute.
func (mr *MockDefaultAPIMockRecorder) CreateInvitationExecute(r any) *MockDefaultAPICreateInvitationExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).CreateInvitationExecute), r)
	return &MockDefaultAPICreateInvitationExecuteCall{Call: call}
}

// MockDefaultAPICreateInvitationExecuteCall wrap *gomock.Call
type MockDefaultAPICreateInvitationExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPICreateInvitationExecuteCall) Return(arg0 *sdk.CreateInvitationResponse, arg1 *http.Response, arg2 error) *MockDefaultAPICreateInvitationExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPICreateInvitationExecuteCall) Do(f func(sdk.ApiCreateInvitationRequest) (*sdk.CreateInvitationResponse, *http.Response, error)) *MockDefaultAPICreateInvitationExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPICreateInvitationExecuteCall) DoAndReturn(f func(sdk.ApiCreateInvitationRequest) (*sdk.CreateInvitationResponse, *http.Response, error)) *MockDefaultAPICreateInvitationExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrganization mocks base method.
func (m *MockDefaultAPI) CreateOrganization(ctx context.Context) sdk.ApiCreateOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx)
	ret0, _ := ret[0].(sdk.ApiCreateOrganizationRequest)
	return ret0
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockDefaultAPIMockRecorder) CreateOrganization(ctx any) *MockDefaultAPICreateOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).CreateOrganization), ctx)
	return &MockDefaultAPICreateOrganizationCall{Call: call}
}

// MockDefaultAPICreateOrganizationCall wrap *gomock.Call
type MockDefaultAPICreateOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPICreateOrganizationCall) Return(arg0 sdk.ApiCreateOrganizationRequest) *MockDefaultAPICreateOrganizationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPICreateOrganizationCall) Do(f func(context.Context) sdk.ApiCreateOrganizationRequest) *MockDefaultAPICreateOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPICreateOrganizationCall) DoAndReturn(f func(context.Context) sdk.ApiCreateOrganizationRequest) *MockDefaultAPICreateOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrganizationClient mocks base method.
func (m *MockDefaultAPI) CreateOrganizationClient(ctx context.Context, organizationId string) sdk.ApiCreateOrganizationClientRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationClient", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiCreateOrganizationClientRequest)
	return ret0
}

// CreateOrganizationClient indicates an expected call of CreateOrganizationClient.
func (mr *MockDefaultAPIMockRecorder) CreateOrganizationClient(ctx, organizationId any) *MockDefaultAPICreateOrganizationClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationClient", reflect.TypeOf((*MockDefaultAPI)(nil).CreateOrganizationClient), ctx, organizationId)
	return &MockDefaultAPICreateOrganizationClientCall{Call: call}
}

// MockDefaultAPICreateOrganizationClientCall wrap *gomock.Call
type MockDefaultAPICreateOrganizationClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPICreateOrganizationClientCall) Return(arg0 sdk.ApiCreateOrganizationClientRequest) *MockDefaultAPICreateOrganizationClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPICreateOrganizationClientCall) Do(f func(context.Context, string) sdk.ApiCreateOrganizationClientRequest) *MockDefaultAPICreateOrganizationClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPICreateOrganizationClientCall) DoAndReturn(f func(context.Context, string) sdk.ApiCreateOrganizationClientRequest) *MockDefaultAPICreateOrganizationClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrganizationClientExecute mocks base method.
func (m *MockDefaultAPI) CreateOrganizationClientExecute(r sdk.ApiCreateOrganizationClientRequest) (*sdk.CreateOrganizationClientResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationClientExecute", r)
	ret0, _ := ret[0].(*sdk.CreateOrganizationClientResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrganizationClientExecute indicates an expected call of CreateOrganizationClientExecute.
func (mr *MockDefaultAPIMockRecorder) CreateOrganizationClientExecute(r any) *MockDefaultAPICreateOrganizationClientExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationClientExecute", reflect.TypeOf((*MockDefaultAPI)(nil).CreateOrganizationClientExecute), r)
	return &MockDefaultAPICreateOrganizationClientExecuteCall{Call: call}
}

// MockDefaultAPICreateOrganizationClientExecuteCall wrap *gomock.Call
type MockDefaultAPICreateOrganizationClientExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPICreateOrganizationClientExecuteCall) Return(arg0 *sdk.CreateOrganizationClientResponse, arg1 *http.Response, arg2 error) *MockDefaultAPICreateOrganizationClientExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPICreateOrganizationClientExecuteCall) Do(f func(sdk.ApiCreateOrganizationClientRequest) (*sdk.CreateOrganizationClientResponse, *http.Response, error)) *MockDefaultAPICreateOrganizationClientExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPICreateOrganizationClientExecuteCall) DoAndReturn(f func(sdk.ApiCreateOrganizationClientRequest) (*sdk.CreateOrganizationClientResponse, *http.Response, error)) *MockDefaultAPICreateOrganizationClientExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrganizationExecute mocks base method.
func (m *MockDefaultAPI) CreateOrganizationExecute(r sdk.ApiCreateOrganizationRequest) (*sdk.CreateOrganizationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationExecute", r)
	ret0, _ := ret[0].(*sdk.CreateOrganizationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrganizationExecute indicates an expected call of CreateOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) CreateOrganizationExecute(r any) *MockDefaultAPICreateOrganizationExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).CreateOrganizationExecute), r)
	return &MockDefaultAPICreateOrganizationExecuteCall{Call: call}
}

// MockDefaultAPICreateOrganizationExecuteCall wrap *gomock.Call
type MockDefaultAPICreateOrganizationExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPICreateOrganizationExecuteCall) Return(arg0 *sdk.CreateOrganizationResponse, arg1 *http.Response, arg2 error) *MockDefaultAPICreateOrganizationExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPICreateOrganizationExecuteCall) Do(f func(sdk.ApiCreateOrganizationRequest) (*sdk.CreateOrganizationResponse, *http.Response, error)) *MockDefaultAPICreateOrganizationExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPICreateOrganizationExecuteCall) DoAndReturn(f func(sdk.ApiCreateOrganizationRequest) (*sdk.CreateOrganizationResponse, *http.Response, error)) *MockDefaultAPICreateOrganizationExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePrivateRegion mocks base method.
func (m *MockDefaultAPI) CreatePrivateRegion(ctx context.Context, organizationId string) sdk.ApiCreatePrivateRegionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateRegion", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiCreatePrivateRegionRequest)
	return ret0
}

// CreatePrivateRegion indicates an expected call of CreatePrivateRegion.
func (mr *MockDefaultAPIMockRecorder) CreatePrivateRegion(ctx, organizationId any) *MockDefaultAPICreatePrivateRegionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateRegion", reflect.TypeOf((*MockDefaultAPI)(nil).CreatePrivateRegion), ctx, organizationId)
	return &MockDefaultAPICreatePrivateRegionCall{Call: call}
}

// MockDefaultAPICreatePrivateRegionCall wrap *gomock.Call
type MockDefaultAPICreatePrivateRegionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPICreatePrivateRegionCall) Return(arg0 sdk.ApiCreatePrivateRegionRequest) *MockDefaultAPICreatePrivateRegionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPICreatePrivateRegionCall) Do(f func(context.Context, string) sdk.ApiCreatePrivateRegionRequest) *MockDefaultAPICreatePrivateRegionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPICreatePrivateRegionCall) DoAndReturn(f func(context.Context, string) sdk.ApiCreatePrivateRegionRequest) *MockDefaultAPICreatePrivateRegionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePrivateRegionExecute mocks base method.
func (m *MockDefaultAPI) CreatePrivateRegionExecute(r sdk.ApiCreatePrivateRegionRequest) (*sdk.CreatedPrivateRegionResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateRegionExecute", r)
	ret0, _ := ret[0].(*sdk.CreatedPrivateRegionResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePrivateRegionExecute indicates an expected call of CreatePrivateRegionExecute.
func (mr *MockDefaultAPIMockRecorder) CreatePrivateRegionExecute(r any) *MockDefaultAPICreatePrivateRegionExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateRegionExecute", reflect.TypeOf((*MockDefaultAPI)(nil).CreatePrivateRegionExecute), r)
	return &MockDefaultAPICreatePrivateRegionExecuteCall{Call: call}
}

// MockDefaultAPICreatePrivateRegionExecuteCall wrap *gomock.Call
type MockDefaultAPICreatePrivateRegionExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPICreatePrivateRegionExecuteCall) Return(arg0 *sdk.CreatedPrivateRegionResponse, arg1 *http.Response, arg2 error) *MockDefaultAPICreatePrivateRegionExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPICreatePrivateRegionExecuteCall) Do(f func(sdk.ApiCreatePrivateRegionRequest) (*sdk.CreatedPrivateRegionResponse, *http.Response, error)) *MockDefaultAPICreatePrivateRegionExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPICreatePrivateRegionExecuteCall) DoAndReturn(f func(sdk.ApiCreatePrivateRegionRequest) (*sdk.CreatedPrivateRegionResponse, *http.Response, error)) *MockDefaultAPICreatePrivateRegionExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateStack mocks base method.
func (m *MockDefaultAPI) CreateStack(ctx context.Context, organizationId string) sdk.ApiCreateStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStack", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiCreateStackRequest)
	return ret0
}

// CreateStack indicates an expected call of CreateStack.
func (mr *MockDefaultAPIMockRecorder) CreateStack(ctx, organizationId any) *MockDefaultAPICreateStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStack", reflect.TypeOf((*MockDefaultAPI)(nil).CreateStack), ctx, organizationId)
	return &MockDefaultAPICreateStackCall{Call: call}
}

// MockDefaultAPICreateStackCall wrap *gomock.Call
type MockDefaultAPICreateStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPICreateStackCall) Return(arg0 sdk.ApiCreateStackRequest) *MockDefaultAPICreateStackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPICreateStackCall) Do(f func(context.Context, string) sdk.ApiCreateStackRequest) *MockDefaultAPICreateStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPICreateStackCall) DoAndReturn(f func(context.Context, string) sdk.ApiCreateStackRequest) *MockDefaultAPICreateStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateStackExecute mocks base method.
func (m *MockDefaultAPI) CreateStackExecute(r sdk.ApiCreateStackRequest) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStackExecute", r)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateStackExecute indicates an expected call of CreateStackExecute.
func (mr *MockDefaultAPIMockRecorder) CreateStackExecute(r any) *MockDefaultAPICreateStackExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).CreateStackExecute), r)
	return &MockDefaultAPICreateStackExecuteCall{Call: call}
}

// MockDefaultAPICreateStackExecuteCall wrap *gomock.Call
type MockDefaultAPICreateStackExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPICreateStackExecuteCall) Return(arg0 *sdk.CreateStackResponse, arg1 *http.Response, arg2 error) *MockDefaultAPICreateStackExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPICreateStackExecuteCall) Do(f func(sdk.ApiCreateStackRequest) (*sdk.CreateStackResponse, *http.Response, error)) *MockDefaultAPICreateStackExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPICreateStackExecuteCall) DoAndReturn(f func(sdk.ApiCreateStackRequest) (*sdk.CreateStackResponse, *http.Response, error)) *MockDefaultAPICreateStackExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeclineInvitation mocks base method.
func (m *MockDefaultAPI) DeclineInvitation(ctx context.Context, invitationId string) sdk.ApiDeclineInvitationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineInvitation", ctx, invitationId)
	ret0, _ := ret[0].(sdk.ApiDeclineInvitationRequest)
	return ret0
}

// DeclineInvitation indicates an expected call of DeclineInvitation.
func (mr *MockDefaultAPIMockRecorder) DeclineInvitation(ctx, invitationId any) *MockDefaultAPIDeclineInvitationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineInvitation", reflect.TypeOf((*MockDefaultAPI)(nil).DeclineInvitation), ctx, invitationId)
	return &MockDefaultAPIDeclineInvitationCall{Call: call}
}

// MockDefaultAPIDeclineInvitationCall wrap *gomock.Call
type MockDefaultAPIDeclineInvitationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeclineInvitationCall) Return(arg0 sdk.ApiDeclineInvitationRequest) *MockDefaultAPIDeclineInvitationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeclineInvitationCall) Do(f func(context.Context, string) sdk.ApiDeclineInvitationRequest) *MockDefaultAPIDeclineInvitationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeclineInvitationCall) DoAndReturn(f func(context.Context, string) sdk.ApiDeclineInvitationRequest) *MockDefaultAPIDeclineInvitationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeclineInvitationExecute mocks base method.
func (m *MockDefaultAPI) DeclineInvitationExecute(r sdk.ApiDeclineInvitationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineInvitationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclineInvitationExecute indicates an expected call of DeclineInvitationExecute.
func (mr *MockDefaultAPIMockRecorder) DeclineInvitationExecute(r any) *MockDefaultAPIDeclineInvitationExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineInvitationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeclineInvitationExecute), r)
	return &MockDefaultAPIDeclineInvitationExecuteCall{Call: call}
}

// MockDefaultAPIDeclineInvitationExecuteCall wrap *gomock.Call
type MockDefaultAPIDeclineInvitationExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeclineInvitationExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDeclineInvitationExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeclineInvitationExecuteCall) Do(f func(sdk.ApiDeclineInvitationRequest) (*http.Response, error)) *MockDefaultAPIDeclineInvitationExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeclineInvitationExecuteCall) DoAndReturn(f func(sdk.ApiDeclineInvitationRequest) (*http.Response, error)) *MockDefaultAPIDeclineInvitationExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteAuthenticationProvider mocks base method.
func (m *MockDefaultAPI) DeleteAuthenticationProvider(ctx context.Context, organizationId string) sdk.ApiDeleteAuthenticationProviderRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthenticationProvider", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiDeleteAuthenticationProviderRequest)
	return ret0
}

// DeleteAuthenticationProvider indicates an expected call of DeleteAuthenticationProvider.
func (mr *MockDefaultAPIMockRecorder) DeleteAuthenticationProvider(ctx, organizationId any) *MockDefaultAPIDeleteAuthenticationProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthenticationProvider", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteAuthenticationProvider), ctx, organizationId)
	return &MockDefaultAPIDeleteAuthenticationProviderCall{Call: call}
}

// MockDefaultAPIDeleteAuthenticationProviderCall wrap *gomock.Call
type MockDefaultAPIDeleteAuthenticationProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteAuthenticationProviderCall) Return(arg0 sdk.ApiDeleteAuthenticationProviderRequest) *MockDefaultAPIDeleteAuthenticationProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteAuthenticationProviderCall) Do(f func(context.Context, string) sdk.ApiDeleteAuthenticationProviderRequest) *MockDefaultAPIDeleteAuthenticationProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteAuthenticationProviderCall) DoAndReturn(f func(context.Context, string) sdk.ApiDeleteAuthenticationProviderRequest) *MockDefaultAPIDeleteAuthenticationProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteAuthenticationProviderExecute mocks base method.
func (m *MockDefaultAPI) DeleteAuthenticationProviderExecute(r sdk.ApiDeleteAuthenticationProviderRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthenticationProviderExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthenticationProviderExecute indicates an expected call of DeleteAuthenticationProviderExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteAuthenticationProviderExecute(r any) *MockDefaultAPIDeleteAuthenticationProviderExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthenticationProviderExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteAuthenticationProviderExecute), r)
	return &MockDefaultAPIDeleteAuthenticationProviderExecuteCall{Call: call}
}

// MockDefaultAPIDeleteAuthenticationProviderExecuteCall wrap *gomock.Call
type MockDefaultAPIDeleteAuthenticationProviderExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteAuthenticationProviderExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDeleteAuthenticationProviderExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteAuthenticationProviderExecuteCall) Do(f func(sdk.ApiDeleteAuthenticationProviderRequest) (*http.Response, error)) *MockDefaultAPIDeleteAuthenticationProviderExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteAuthenticationProviderExecuteCall) DoAndReturn(f func(sdk.ApiDeleteAuthenticationProviderRequest) (*http.Response, error)) *MockDefaultAPIDeleteAuthenticationProviderExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteFeature mocks base method.
func (m *MockDefaultAPI) DeleteFeature(ctx context.Context, organizationId, name string) sdk.ApiDeleteFeatureRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeature", ctx, organizationId, name)
	ret0, _ := ret[0].(sdk.ApiDeleteFeatureRequest)
	return ret0
}

// DeleteFeature indicates an expected call of DeleteFeature.
func (mr *MockDefaultAPIMockRecorder) DeleteFeature(ctx, organizationId, name any) *MockDefaultAPIDeleteFeatureCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeature", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteFeature), ctx, organizationId, name)
	return &MockDefaultAPIDeleteFeatureCall{Call: call}
}

// MockDefaultAPIDeleteFeatureCall wrap *gomock.Call
type MockDefaultAPIDeleteFeatureCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteFeatureCall) Return(arg0 sdk.ApiDeleteFeatureRequest) *MockDefaultAPIDeleteFeatureCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteFeatureCall) Do(f func(context.Context, string, string) sdk.ApiDeleteFeatureRequest) *MockDefaultAPIDeleteFeatureCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteFeatureCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiDeleteFeatureRequest) *MockDefaultAPIDeleteFeatureCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteFeatureExecute mocks base method.
func (m *MockDefaultAPI) DeleteFeatureExecute(r sdk.ApiDeleteFeatureRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeatureExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeatureExecute indicates an expected call of DeleteFeatureExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteFeatureExecute(r any) *MockDefaultAPIDeleteFeatureExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeatureExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteFeatureExecute), r)
	return &MockDefaultAPIDeleteFeatureExecuteCall{Call: call}
}

// MockDefaultAPIDeleteFeatureExecuteCall wrap *gomock.Call
type MockDefaultAPIDeleteFeatureExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteFeatureExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDeleteFeatureExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteFeatureExecuteCall) Do(f func(sdk.ApiDeleteFeatureRequest) (*http.Response, error)) *MockDefaultAPIDeleteFeatureExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteFeatureExecuteCall) DoAndReturn(f func(sdk.ApiDeleteFeatureRequest) (*http.Response, error)) *MockDefaultAPIDeleteFeatureExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInvitation mocks base method.
func (m *MockDefaultAPI) DeleteInvitation(ctx context.Context, organizationId, invitationId string) sdk.ApiDeleteInvitationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitation", ctx, organizationId, invitationId)
	ret0, _ := ret[0].(sdk.ApiDeleteInvitationRequest)
	return ret0
}

// DeleteInvitation indicates an expected call of DeleteInvitation.
func (mr *MockDefaultAPIMockRecorder) DeleteInvitation(ctx, organizationId, invitationId any) *MockDefaultAPIDeleteInvitationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitation", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteInvitation), ctx, organizationId, invitationId)
	return &MockDefaultAPIDeleteInvitationCall{Call: call}
}

// MockDefaultAPIDeleteInvitationCall wrap *gomock.Call
type MockDefaultAPIDeleteInvitationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteInvitationCall) Return(arg0 sdk.ApiDeleteInvitationRequest) *MockDefaultAPIDeleteInvitationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteInvitationCall) Do(f func(context.Context, string, string) sdk.ApiDeleteInvitationRequest) *MockDefaultAPIDeleteInvitationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteInvitationCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiDeleteInvitationRequest) *MockDefaultAPIDeleteInvitationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInvitationExecute mocks base method.
func (m *MockDefaultAPI) DeleteInvitationExecute(r sdk.ApiDeleteInvitationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitationExecute indicates an expected call of DeleteInvitationExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteInvitationExecute(r any) *MockDefaultAPIDeleteInvitationExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteInvitationExecute), r)
	return &MockDefaultAPIDeleteInvitationExecuteCall{Call: call}
}

// MockDefaultAPIDeleteInvitationExecuteCall wrap *gomock.Call
type MockDefaultAPIDeleteInvitationExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteInvitationExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDeleteInvitationExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteInvitationExecuteCall) Do(f func(sdk.ApiDeleteInvitationRequest) (*http.Response, error)) *MockDefaultAPIDeleteInvitationExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteInvitationExecuteCall) DoAndReturn(f func(sdk.ApiDeleteInvitationRequest) (*http.Response, error)) *MockDefaultAPIDeleteInvitationExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteOrganization mocks base method.
func (m *MockDefaultAPI) DeleteOrganization(ctx context.Context, organizationId string) sdk.ApiDeleteOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiDeleteOrganizationRequest)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockDefaultAPIMockRecorder) DeleteOrganization(ctx, organizationId any) *MockDefaultAPIDeleteOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteOrganization), ctx, organizationId)
	return &MockDefaultAPIDeleteOrganizationCall{Call: call}
}

// MockDefaultAPIDeleteOrganizationCall wrap *gomock.Call
type MockDefaultAPIDeleteOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteOrganizationCall) Return(arg0 sdk.ApiDeleteOrganizationRequest) *MockDefaultAPIDeleteOrganizationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteOrganizationCall) Do(f func(context.Context, string) sdk.ApiDeleteOrganizationRequest) *MockDefaultAPIDeleteOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteOrganizationCall) DoAndReturn(f func(context.Context, string) sdk.ApiDeleteOrganizationRequest) *MockDefaultAPIDeleteOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteOrganizationClient mocks base method.
func (m *MockDefaultAPI) DeleteOrganizationClient(ctx context.Context, organizationId string) sdk.ApiDeleteOrganizationClientRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationClient", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiDeleteOrganizationClientRequest)
	return ret0
}

// DeleteOrganizationClient indicates an expected call of DeleteOrganizationClient.
func (mr *MockDefaultAPIMockRecorder) DeleteOrganizationClient(ctx, organizationId any) *MockDefaultAPIDeleteOrganizationClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationClient", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteOrganizationClient), ctx, organizationId)
	return &MockDefaultAPIDeleteOrganizationClientCall{Call: call}
}

// MockDefaultAPIDeleteOrganizationClientCall wrap *gomock.Call
type MockDefaultAPIDeleteOrganizationClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteOrganizationClientCall) Return(arg0 sdk.ApiDeleteOrganizationClientRequest) *MockDefaultAPIDeleteOrganizationClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteOrganizationClientCall) Do(f func(context.Context, string) sdk.ApiDeleteOrganizationClientRequest) *MockDefaultAPIDeleteOrganizationClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteOrganizationClientCall) DoAndReturn(f func(context.Context, string) sdk.ApiDeleteOrganizationClientRequest) *MockDefaultAPIDeleteOrganizationClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteOrganizationClientExecute mocks base method.
func (m *MockDefaultAPI) DeleteOrganizationClientExecute(r sdk.ApiDeleteOrganizationClientRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationClientExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationClientExecute indicates an expected call of DeleteOrganizationClientExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteOrganizationClientExecute(r any) *MockDefaultAPIDeleteOrganizationClientExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationClientExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteOrganizationClientExecute), r)
	return &MockDefaultAPIDeleteOrganizationClientExecuteCall{Call: call}
}

// MockDefaultAPIDeleteOrganizationClientExecuteCall wrap *gomock.Call
type MockDefaultAPIDeleteOrganizationClientExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteOrganizationClientExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDeleteOrganizationClientExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteOrganizationClientExecuteCall) Do(f func(sdk.ApiDeleteOrganizationClientRequest) (*http.Response, error)) *MockDefaultAPIDeleteOrganizationClientExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteOrganizationClientExecuteCall) DoAndReturn(f func(sdk.ApiDeleteOrganizationClientRequest) (*http.Response, error)) *MockDefaultAPIDeleteOrganizationClientExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteOrganizationExecute mocks base method.
func (m *MockDefaultAPI) DeleteOrganizationExecute(r sdk.ApiDeleteOrganizationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationExecute indicates an expected call of DeleteOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteOrganizationExecute(r any) *MockDefaultAPIDeleteOrganizationExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteOrganizationExecute), r)
	return &MockDefaultAPIDeleteOrganizationExecuteCall{Call: call}
}

// MockDefaultAPIDeleteOrganizationExecuteCall wrap *gomock.Call
type MockDefaultAPIDeleteOrganizationExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteOrganizationExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDeleteOrganizationExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteOrganizationExecuteCall) Do(f func(sdk.ApiDeleteOrganizationRequest) (*http.Response, error)) *MockDefaultAPIDeleteOrganizationExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteOrganizationExecuteCall) DoAndReturn(f func(sdk.ApiDeleteOrganizationRequest) (*http.Response, error)) *MockDefaultAPIDeleteOrganizationExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRegion mocks base method.
func (m *MockDefaultAPI) DeleteRegion(ctx context.Context, organizationId, regionID string) sdk.ApiDeleteRegionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegion", ctx, organizationId, regionID)
	ret0, _ := ret[0].(sdk.ApiDeleteRegionRequest)
	return ret0
}

// DeleteRegion indicates an expected call of DeleteRegion.
func (mr *MockDefaultAPIMockRecorder) DeleteRegion(ctx, organizationId, regionID any) *MockDefaultAPIDeleteRegionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegion", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteRegion), ctx, organizationId, regionID)
	return &MockDefaultAPIDeleteRegionCall{Call: call}
}

// MockDefaultAPIDeleteRegionCall wrap *gomock.Call
type MockDefaultAPIDeleteRegionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteRegionCall) Return(arg0 sdk.ApiDeleteRegionRequest) *MockDefaultAPIDeleteRegionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteRegionCall) Do(f func(context.Context, string, string) sdk.ApiDeleteRegionRequest) *MockDefaultAPIDeleteRegionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteRegionCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiDeleteRegionRequest) *MockDefaultAPIDeleteRegionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRegionExecute mocks base method.
func (m *MockDefaultAPI) DeleteRegionExecute(r sdk.ApiDeleteRegionRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegionExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegionExecute indicates an expected call of DeleteRegionExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteRegionExecute(r any) *MockDefaultAPIDeleteRegionExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegionExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteRegionExecute), r)
	return &MockDefaultAPIDeleteRegionExecuteCall{Call: call}
}

// MockDefaultAPIDeleteRegionExecuteCall wrap *gomock.Call
type MockDefaultAPIDeleteRegionExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteRegionExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDeleteRegionExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteRegionExecuteCall) Do(f func(sdk.ApiDeleteRegionRequest) (*http.Response, error)) *MockDefaultAPIDeleteRegionExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteRegionExecuteCall) DoAndReturn(f func(sdk.ApiDeleteRegionRequest) (*http.Response, error)) *MockDefaultAPIDeleteRegionExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStack mocks base method.
func (m *MockDefaultAPI) DeleteStack(ctx context.Context, organizationId, stackId string) sdk.ApiDeleteStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiDeleteStackRequest)
	return ret0
}

// DeleteStack indicates an expected call of DeleteStack.
func (mr *MockDefaultAPIMockRecorder) DeleteStack(ctx, organizationId, stackId any) *MockDefaultAPIDeleteStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStack", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteStack), ctx, organizationId, stackId)
	return &MockDefaultAPIDeleteStackCall{Call: call}
}

// MockDefaultAPIDeleteStackCall wrap *gomock.Call
type MockDefaultAPIDeleteStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteStackCall) Return(arg0 sdk.ApiDeleteStackRequest) *MockDefaultAPIDeleteStackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteStackCall) Do(f func(context.Context, string, string) sdk.ApiDeleteStackRequest) *MockDefaultAPIDeleteStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteStackCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiDeleteStackRequest) *MockDefaultAPIDeleteStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStackExecute mocks base method.
func (m *MockDefaultAPI) DeleteStackExecute(r sdk.ApiDeleteStackRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStackExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStackExecute indicates an expected call of DeleteStackExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteStackExecute(r any) *MockDefaultAPIDeleteStackExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteStackExecute), r)
	return &MockDefaultAPIDeleteStackExecuteCall{Call: call}
}

// MockDefaultAPIDeleteStackExecuteCall wrap *gomock.Call
type MockDefaultAPIDeleteStackExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteStackExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDeleteStackExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteStackExecuteCall) Do(f func(sdk.ApiDeleteStackRequest) (*http.Response, error)) *MockDefaultAPIDeleteStackExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteStackExecuteCall) DoAndReturn(f func(sdk.ApiDeleteStackRequest) (*http.Response, error)) *MockDefaultAPIDeleteStackExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStackUserAccess mocks base method.
func (m *MockDefaultAPI) DeleteStackUserAccess(ctx context.Context, organizationId, stackId, userId string) sdk.ApiDeleteStackUserAccessRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStackUserAccess", ctx, organizationId, stackId, userId)
	ret0, _ := ret[0].(sdk.ApiDeleteStackUserAccessRequest)
	return ret0
}

// DeleteStackUserAccess indicates an expected call of DeleteStackUserAccess.
func (mr *MockDefaultAPIMockRecorder) DeleteStackUserAccess(ctx, organizationId, stackId, userId any) *MockDefaultAPIDeleteStackUserAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackUserAccess", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteStackUserAccess), ctx, organizationId, stackId, userId)
	return &MockDefaultAPIDeleteStackUserAccessCall{Call: call}
}

// MockDefaultAPIDeleteStackUserAccessCall wrap *gomock.Call
type MockDefaultAPIDeleteStackUserAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteStackUserAccessCall) Return(arg0 sdk.ApiDeleteStackUserAccessRequest) *MockDefaultAPIDeleteStackUserAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteStackUserAccessCall) Do(f func(context.Context, string, string, string) sdk.ApiDeleteStackUserAccessRequest) *MockDefaultAPIDeleteStackUserAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteStackUserAccessCall) DoAndReturn(f func(context.Context, string, string, string) sdk.ApiDeleteStackUserAccessRequest) *MockDefaultAPIDeleteStackUserAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStackUserAccessExecute mocks base method.
func (m *MockDefaultAPI) DeleteStackUserAccessExecute(r sdk.ApiDeleteStackUserAccessRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStackUserAccessExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStackUserAccessExecute indicates an expected call of DeleteStackUserAccessExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteStackUserAccessExecute(r any) *MockDefaultAPIDeleteStackUserAccessExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackUserAccessExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteStackUserAccessExecute), r)
	return &MockDefaultAPIDeleteStackUserAccessExecuteCall{Call: call}
}

// MockDefaultAPIDeleteStackUserAccessExecuteCall wrap *gomock.Call
type MockDefaultAPIDeleteStackUserAccessExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteStackUserAccessExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDeleteStackUserAccessExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteStackUserAccessExecuteCall) Do(f func(sdk.ApiDeleteStackUserAccessRequest) (*http.Response, error)) *MockDefaultAPIDeleteStackUserAccessExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteStackUserAccessExecuteCall) DoAndReturn(f func(sdk.ApiDeleteStackUserAccessRequest) (*http.Response, error)) *MockDefaultAPIDeleteStackUserAccessExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUserFromOrganization mocks base method.
func (m *MockDefaultAPI) DeleteUserFromOrganization(ctx context.Context, organizationId, userId string) sdk.ApiDeleteUserFromOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromOrganization", ctx, organizationId, userId)
	ret0, _ := ret[0].(sdk.ApiDeleteUserFromOrganizationRequest)
	return ret0
}

// DeleteUserFromOrganization indicates an expected call of DeleteUserFromOrganization.
func (mr *MockDefaultAPIMockRecorder) DeleteUserFromOrganization(ctx, organizationId, userId any) *MockDefaultAPIDeleteUserFromOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteUserFromOrganization), ctx, organizationId, userId)
	return &MockDefaultAPIDeleteUserFromOrganizationCall{Call: call}
}

// MockDefaultAPIDeleteUserFromOrganizationCall wrap *gomock.Call
type MockDefaultAPIDeleteUserFromOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteUserFromOrganizationCall) Return(arg0 sdk.ApiDeleteUserFromOrganizationRequest) *MockDefaultAPIDeleteUserFromOrganizationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteUserFromOrganizationCall) Do(f func(context.Context, string, string) sdk.ApiDeleteUserFromOrganizationRequest) *MockDefaultAPIDeleteUserFromOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteUserFromOrganizationCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiDeleteUserFromOrganizationRequest) *MockDefaultAPIDeleteUserFromOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUserFromOrganizationExecute mocks base method.
func (m *MockDefaultAPI) DeleteUserFromOrganizationExecute(r sdk.ApiDeleteUserFromOrganizationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromOrganizationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserFromOrganizationExecute indicates an expected call of DeleteUserFromOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteUserFromOrganizationExecute(r any) *MockDefaultAPIDeleteUserFromOrganizationExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteUserFromOrganizationExecute), r)
	return &MockDefaultAPIDeleteUserFromOrganizationExecuteCall{Call: call}
}

// MockDefaultAPIDeleteUserFromOrganizationExecuteCall wrap *gomock.Call
type MockDefaultAPIDeleteUserFromOrganizationExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDeleteUserFromOrganizationExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDeleteUserFromOrganizationExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDeleteUserFromOrganizationExecuteCall) Do(f func(sdk.ApiDeleteUserFromOrganizationRequest) (*http.Response, error)) *MockDefaultAPIDeleteUserFromOrganizationExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDeleteUserFromOrganizationExecuteCall) DoAndReturn(f func(sdk.ApiDeleteUserFromOrganizationRequest) (*http.Response, error)) *MockDefaultAPIDeleteUserFromOrganizationExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisableModule mocks base method.
func (m *MockDefaultAPI) DisableModule(ctx context.Context, organizationId, stackId string) sdk.ApiDisableModuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableModule", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiDisableModuleRequest)
	return ret0
}

// DisableModule indicates an expected call of DisableModule.
func (mr *MockDefaultAPIMockRecorder) DisableModule(ctx, organizationId, stackId any) *MockDefaultAPIDisableModuleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableModule", reflect.TypeOf((*MockDefaultAPI)(nil).DisableModule), ctx, organizationId, stackId)
	return &MockDefaultAPIDisableModuleCall{Call: call}
}

// MockDefaultAPIDisableModuleCall wrap *gomock.Call
type MockDefaultAPIDisableModuleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDisableModuleCall) Return(arg0 sdk.ApiDisableModuleRequest) *MockDefaultAPIDisableModuleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDisableModuleCall) Do(f func(context.Context, string, string) sdk.ApiDisableModuleRequest) *MockDefaultAPIDisableModuleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDisableModuleCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiDisableModuleRequest) *MockDefaultAPIDisableModuleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisableModuleExecute mocks base method.
func (m *MockDefaultAPI) DisableModuleExecute(r sdk.ApiDisableModuleRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableModuleExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableModuleExecute indicates an expected call of DisableModuleExecute.
func (mr *MockDefaultAPIMockRecorder) DisableModuleExecute(r any) *MockDefaultAPIDisableModuleExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableModuleExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DisableModuleExecute), r)
	return &MockDefaultAPIDisableModuleExecuteCall{Call: call}
}

// MockDefaultAPIDisableModuleExecuteCall wrap *gomock.Call
type MockDefaultAPIDisableModuleExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDisableModuleExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDisableModuleExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDisableModuleExecuteCall) Do(f func(sdk.ApiDisableModuleRequest) (*http.Response, error)) *MockDefaultAPIDisableModuleExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDisableModuleExecuteCall) DoAndReturn(f func(sdk.ApiDisableModuleRequest) (*http.Response, error)) *MockDefaultAPIDisableModuleExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisableStack mocks base method.
func (m *MockDefaultAPI) DisableStack(ctx context.Context, organizationId, stackId string) sdk.ApiDisableStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiDisableStackRequest)
	return ret0
}

// DisableStack indicates an expected call of DisableStack.
func (mr *MockDefaultAPIMockRecorder) DisableStack(ctx, organizationId, stackId any) *MockDefaultAPIDisableStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableStack", reflect.TypeOf((*MockDefaultAPI)(nil).DisableStack), ctx, organizationId, stackId)
	return &MockDefaultAPIDisableStackCall{Call: call}
}

// MockDefaultAPIDisableStackCall wrap *gomock.Call
type MockDefaultAPIDisableStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDisableStackCall) Return(arg0 sdk.ApiDisableStackRequest) *MockDefaultAPIDisableStackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDisableStackCall) Do(f func(context.Context, string, string) sdk.ApiDisableStackRequest) *MockDefaultAPIDisableStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDisableStackCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiDisableStackRequest) *MockDefaultAPIDisableStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisableStackExecute mocks base method.
func (m *MockDefaultAPI) DisableStackExecute(r sdk.ApiDisableStackRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableStackExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableStackExecute indicates an expected call of DisableStackExecute.
func (mr *MockDefaultAPIMockRecorder) DisableStackExecute(r any) *MockDefaultAPIDisableStackExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DisableStackExecute), r)
	return &MockDefaultAPIDisableStackExecuteCall{Call: call}
}

// MockDefaultAPIDisableStackExecuteCall wrap *gomock.Call
type MockDefaultAPIDisableStackExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDisableStackExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDisableStackExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDisableStackExecuteCall) Do(f func(sdk.ApiDisableStackRequest) (*http.Response, error)) *MockDefaultAPIDisableStackExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDisableStackExecuteCall) DoAndReturn(f func(sdk.ApiDisableStackRequest) (*http.Response, error)) *MockDefaultAPIDisableStackExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisableStargate mocks base method.
func (m *MockDefaultAPI) DisableStargate(ctx context.Context, organizationId, stackId string) sdk.ApiDisableStargateRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableStargate", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiDisableStargateRequest)
	return ret0
}

// DisableStargate indicates an expected call of DisableStargate.
func (mr *MockDefaultAPIMockRecorder) DisableStargate(ctx, organizationId, stackId any) *MockDefaultAPIDisableStargateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableStargate", reflect.TypeOf((*MockDefaultAPI)(nil).DisableStargate), ctx, organizationId, stackId)
	return &MockDefaultAPIDisableStargateCall{Call: call}
}

// MockDefaultAPIDisableStargateCall wrap *gomock.Call
type MockDefaultAPIDisableStargateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDisableStargateCall) Return(arg0 sdk.ApiDisableStargateRequest) *MockDefaultAPIDisableStargateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDisableStargateCall) Do(f func(context.Context, string, string) sdk.ApiDisableStargateRequest) *MockDefaultAPIDisableStargateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDisableStargateCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiDisableStargateRequest) *MockDefaultAPIDisableStargateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisableStargateExecute mocks base method.
func (m *MockDefaultAPI) DisableStargateExecute(r sdk.ApiDisableStargateRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableStargateExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableStargateExecute indicates an expected call of DisableStargateExecute.
func (mr *MockDefaultAPIMockRecorder) DisableStargateExecute(r any) *MockDefaultAPIDisableStargateExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableStargateExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DisableStargateExecute), r)
	return &MockDefaultAPIDisableStargateExecuteCall{Call: call}
}

// MockDefaultAPIDisableStargateExecuteCall wrap *gomock.Call
type MockDefaultAPIDisableStargateExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIDisableStargateExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIDisableStargateExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIDisableStargateExecuteCall) Do(f func(sdk.ApiDisableStargateRequest) (*http.Response, error)) *MockDefaultAPIDisableStargateExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIDisableStargateExecuteCall) DoAndReturn(f func(sdk.ApiDisableStargateRequest) (*http.Response, error)) *MockDefaultAPIDisableStargateExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableModule mocks base method.
func (m *MockDefaultAPI) EnableModule(ctx context.Context, organizationId, stackId string) sdk.ApiEnableModuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableModule", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiEnableModuleRequest)
	return ret0
}

// EnableModule indicates an expected call of EnableModule.
func (mr *MockDefaultAPIMockRecorder) EnableModule(ctx, organizationId, stackId any) *MockDefaultAPIEnableModuleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableModule", reflect.TypeOf((*MockDefaultAPI)(nil).EnableModule), ctx, organizationId, stackId)
	return &MockDefaultAPIEnableModuleCall{Call: call}
}

// MockDefaultAPIEnableModuleCall wrap *gomock.Call
type MockDefaultAPIEnableModuleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIEnableModuleCall) Return(arg0 sdk.ApiEnableModuleRequest) *MockDefaultAPIEnableModuleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIEnableModuleCall) Do(f func(context.Context, string, string) sdk.ApiEnableModuleRequest) *MockDefaultAPIEnableModuleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIEnableModuleCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiEnableModuleRequest) *MockDefaultAPIEnableModuleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableModuleExecute mocks base method.
func (m *MockDefaultAPI) EnableModuleExecute(r sdk.ApiEnableModuleRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableModuleExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableModuleExecute indicates an expected call of EnableModuleExecute.
func (mr *MockDefaultAPIMockRecorder) EnableModuleExecute(r any) *MockDefaultAPIEnableModuleExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableModuleExecute", reflect.TypeOf((*MockDefaultAPI)(nil).EnableModuleExecute), r)
	return &MockDefaultAPIEnableModuleExecuteCall{Call: call}
}

// MockDefaultAPIEnableModuleExecuteCall wrap *gomock.Call
type MockDefaultAPIEnableModuleExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIEnableModuleExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIEnableModuleExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIEnableModuleExecuteCall) Do(f func(sdk.ApiEnableModuleRequest) (*http.Response, error)) *MockDefaultAPIEnableModuleExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIEnableModuleExecuteCall) DoAndReturn(f func(sdk.ApiEnableModuleRequest) (*http.Response, error)) *MockDefaultAPIEnableModuleExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableStack mocks base method.
func (m *MockDefaultAPI) EnableStack(ctx context.Context, organizationId, stackId string) sdk.ApiEnableStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiEnableStackRequest)
	return ret0
}

// EnableStack indicates an expected call of EnableStack.
func (mr *MockDefaultAPIMockRecorder) EnableStack(ctx, organizationId, stackId any) *MockDefaultAPIEnableStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableStack", reflect.TypeOf((*MockDefaultAPI)(nil).EnableStack), ctx, organizationId, stackId)
	return &MockDefaultAPIEnableStackCall{Call: call}
}

// MockDefaultAPIEnableStackCall wrap *gomock.Call
type MockDefaultAPIEnableStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIEnableStackCall) Return(arg0 sdk.ApiEnableStackRequest) *MockDefaultAPIEnableStackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIEnableStackCall) Do(f func(context.Context, string, string) sdk.ApiEnableStackRequest) *MockDefaultAPIEnableStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIEnableStackCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiEnableStackRequest) *MockDefaultAPIEnableStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableStackExecute mocks base method.
func (m *MockDefaultAPI) EnableStackExecute(r sdk.ApiEnableStackRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableStackExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableStackExecute indicates an expected call of EnableStackExecute.
func (mr *MockDefaultAPIMockRecorder) EnableStackExecute(r any) *MockDefaultAPIEnableStackExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).EnableStackExecute), r)
	return &MockDefaultAPIEnableStackExecuteCall{Call: call}
}

// MockDefaultAPIEnableStackExecuteCall wrap *gomock.Call
type MockDefaultAPIEnableStackExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIEnableStackExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIEnableStackExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIEnableStackExecuteCall) Do(f func(sdk.ApiEnableStackRequest) (*http.Response, error)) *MockDefaultAPIEnableStackExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIEnableStackExecuteCall) DoAndReturn(f func(sdk.ApiEnableStackRequest) (*http.Response, error)) *MockDefaultAPIEnableStackExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableStargate mocks base method.
func (m *MockDefaultAPI) EnableStargate(ctx context.Context, organizationId, stackId string) sdk.ApiEnableStargateRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableStargate", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiEnableStargateRequest)
	return ret0
}

// EnableStargate indicates an expected call of EnableStargate.
func (mr *MockDefaultAPIMockRecorder) EnableStargate(ctx, organizationId, stackId any) *MockDefaultAPIEnableStargateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableStargate", reflect.TypeOf((*MockDefaultAPI)(nil).EnableStargate), ctx, organizationId, stackId)
	return &MockDefaultAPIEnableStargateCall{Call: call}
}

// MockDefaultAPIEnableStargateCall wrap *gomock.Call
type MockDefaultAPIEnableStargateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIEnableStargateCall) Return(arg0 sdk.ApiEnableStargateRequest) *MockDefaultAPIEnableStargateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIEnableStargateCall) Do(f func(context.Context, string, string) sdk.ApiEnableStargateRequest) *MockDefaultAPIEnableStargateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIEnableStargateCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiEnableStargateRequest) *MockDefaultAPIEnableStargateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableStargateExecute mocks base method.
func (m *MockDefaultAPI) EnableStargateExecute(r sdk.ApiEnableStargateRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableStargateExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableStargateExecute indicates an expected call of EnableStargateExecute.
func (mr *MockDefaultAPIMockRecorder) EnableStargateExecute(r any) *MockDefaultAPIEnableStargateExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableStargateExecute", reflect.TypeOf((*MockDefaultAPI)(nil).EnableStargateExecute), r)
	return &MockDefaultAPIEnableStargateExecuteCall{Call: call}
}

// MockDefaultAPIEnableStargateExecuteCall wrap *gomock.Call
type MockDefaultAPIEnableStargateExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIEnableStargateExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIEnableStargateExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIEnableStargateExecuteCall) Do(f func(sdk.ApiEnableStargateRequest) (*http.Response, error)) *MockDefaultAPIEnableStargateExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIEnableStargateExecuteCall) DoAndReturn(f func(sdk.ApiEnableStargateRequest) (*http.Response, error)) *MockDefaultAPIEnableStargateExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRegion mocks base method.
func (m *MockDefaultAPI) GetRegion(ctx context.Context, organizationId, regionID string) sdk.ApiGetRegionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", ctx, organizationId, regionID)
	ret0, _ := ret[0].(sdk.ApiGetRegionRequest)
	return ret0
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockDefaultAPIMockRecorder) GetRegion(ctx, organizationId, regionID any) *MockDefaultAPIGetRegionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockDefaultAPI)(nil).GetRegion), ctx, organizationId, regionID)
	return &MockDefaultAPIGetRegionCall{Call: call}
}

// MockDefaultAPIGetRegionCall wrap *gomock.Call
type MockDefaultAPIGetRegionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIGetRegionCall) Return(arg0 sdk.ApiGetRegionRequest) *MockDefaultAPIGetRegionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIGetRegionCall) Do(f func(context.Context, string, string) sdk.ApiGetRegionRequest) *MockDefaultAPIGetRegionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIGetRegionCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiGetRegionRequest) *MockDefaultAPIGetRegionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRegionExecute mocks base method.
func (m *MockDefaultAPI) GetRegionExecute(r sdk.ApiGetRegionRequest) (*sdk.GetRegionResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionExecute", r)
	ret0, _ := ret[0].(*sdk.GetRegionResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegionExecute indicates an expected call of GetRegionExecute.
func (mr *MockDefaultAPIMockRecorder) GetRegionExecute(r any) *MockDefaultAPIGetRegionExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionExecute", reflect.TypeOf((*MockDefaultAPI)(nil).GetRegionExecute), r)
	return &MockDefaultAPIGetRegionExecuteCall{Call: call}
}

// MockDefaultAPIGetRegionExecuteCall wrap *gomock.Call
type MockDefaultAPIGetRegionExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIGetRegionExecuteCall) Return(arg0 *sdk.GetRegionResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIGetRegionExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIGetRegionExecuteCall) Do(f func(sdk.ApiGetRegionRequest) (*sdk.GetRegionResponse, *http.Response, error)) *MockDefaultAPIGetRegionExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIGetRegionExecuteCall) DoAndReturn(f func(sdk.ApiGetRegionRequest) (*sdk.GetRegionResponse, *http.Response, error)) *MockDefaultAPIGetRegionExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRegionVersions mocks base method.
func (m *MockDefaultAPI) GetRegionVersions(ctx context.Context, organizationId, regionID string) sdk.ApiGetRegionVersionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionVersions", ctx, organizationId, regionID)
	ret0, _ := ret[0].(sdk.ApiGetRegionVersionsRequest)
	return ret0
}

// GetRegionVersions indicates an expected call of GetRegionVersions.
func (mr *MockDefaultAPIMockRecorder) GetRegionVersions(ctx, organizationId, regionID any) *MockDefaultAPIGetRegionVersionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionVersions", reflect.TypeOf((*MockDefaultAPI)(nil).GetRegionVersions), ctx, organizationId, regionID)
	return &MockDefaultAPIGetRegionVersionsCall{Call: call}
}

// MockDefaultAPIGetRegionVersionsCall wrap *gomock.Call
type MockDefaultAPIGetRegionVersionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIGetRegionVersionsCall) Return(arg0 sdk.ApiGetRegionVersionsRequest) *MockDefaultAPIGetRegionVersionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIGetRegionVersionsCall) Do(f func(context.Context, string, string) sdk.ApiGetRegionVersionsRequest) *MockDefaultAPIGetRegionVersionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIGetRegionVersionsCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiGetRegionVersionsRequest) *MockDefaultAPIGetRegionVersionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRegionVersionsExecute mocks base method.
func (m *MockDefaultAPI) GetRegionVersionsExecute(r sdk.ApiGetRegionVersionsRequest) (*sdk.GetRegionVersionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionVersionsExecute", r)
	ret0, _ := ret[0].(*sdk.GetRegionVersionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegionVersionsExecute indicates an expected call of GetRegionVersionsExecute.
func (mr *MockDefaultAPIMockRecorder) GetRegionVersionsExecute(r any) *MockDefaultAPIGetRegionVersionsExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionVersionsExecute", reflect.TypeOf((*MockDefaultAPI)(nil).GetRegionVersionsExecute), r)
	return &MockDefaultAPIGetRegionVersionsExecuteCall{Call: call}
}

// MockDefaultAPIGetRegionVersionsExecuteCall wrap *gomock.Call
type MockDefaultAPIGetRegionVersionsExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIGetRegionVersionsExecuteCall) Return(arg0 *sdk.GetRegionVersionsResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIGetRegionVersionsExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIGetRegionVersionsExecuteCall) Do(f func(sdk.ApiGetRegionVersionsRequest) (*sdk.GetRegionVersionsResponse, *http.Response, error)) *MockDefaultAPIGetRegionVersionsExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIGetRegionVersionsExecuteCall) DoAndReturn(f func(sdk.ApiGetRegionVersionsRequest) (*sdk.GetRegionVersionsResponse, *http.Response, error)) *MockDefaultAPIGetRegionVersionsExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetServerInfo mocks base method.
func (m *MockDefaultAPI) GetServerInfo(ctx context.Context) sdk.ApiGetServerInfoRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerInfo", ctx)
	ret0, _ := ret[0].(sdk.ApiGetServerInfoRequest)
	return ret0
}

// GetServerInfo indicates an expected call of GetServerInfo.
func (mr *MockDefaultAPIMockRecorder) GetServerInfo(ctx any) *MockDefaultAPIGetServerInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerInfo", reflect.TypeOf((*MockDefaultAPI)(nil).GetServerInfo), ctx)
	return &MockDefaultAPIGetServerInfoCall{Call: call}
}

// MockDefaultAPIGetServerInfoCall wrap *gomock.Call
type MockDefaultAPIGetServerInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIGetServerInfoCall) Return(arg0 sdk.ApiGetServerInfoRequest) *MockDefaultAPIGetServerInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIGetServerInfoCall) Do(f func(context.Context) sdk.ApiGetServerInfoRequest) *MockDefaultAPIGetServerInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIGetServerInfoCall) DoAndReturn(f func(context.Context) sdk.ApiGetServerInfoRequest) *MockDefaultAPIGetServerInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetServerInfoExecute mocks base method.
func (m *MockDefaultAPI) GetServerInfoExecute(r sdk.ApiGetServerInfoRequest) (*sdk.ServerInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerInfoExecute", r)
	ret0, _ := ret[0].(*sdk.ServerInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServerInfoExecute indicates an expected call of GetServerInfoExecute.
func (mr *MockDefaultAPIMockRecorder) GetServerInfoExecute(r any) *MockDefaultAPIGetServerInfoExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerInfoExecute", reflect.TypeOf((*MockDefaultAPI)(nil).GetServerInfoExecute), r)
	return &MockDefaultAPIGetServerInfoExecuteCall{Call: call}
}

// MockDefaultAPIGetServerInfoExecuteCall wrap *gomock.Call
type MockDefaultAPIGetServerInfoExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIGetServerInfoExecuteCall) Return(arg0 *sdk.ServerInfo, arg1 *http.Response, arg2 error) *MockDefaultAPIGetServerInfoExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIGetServerInfoExecuteCall) Do(f func(sdk.ApiGetServerInfoRequest) (*sdk.ServerInfo, *http.Response, error)) *MockDefaultAPIGetServerInfoExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIGetServerInfoExecuteCall) DoAndReturn(f func(sdk.ApiGetServerInfoRequest) (*sdk.ServerInfo, *http.Response, error)) *MockDefaultAPIGetServerInfoExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStack mocks base method.
func (m *MockDefaultAPI) GetStack(ctx context.Context, organizationId, stackId string) sdk.ApiGetStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiGetStackRequest)
	return ret0
}

// GetStack indicates an expected call of GetStack.
func (mr *MockDefaultAPIMockRecorder) GetStack(ctx, organizationId, stackId any) *MockDefaultAPIGetStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStack", reflect.TypeOf((*MockDefaultAPI)(nil).GetStack), ctx, organizationId, stackId)
	return &MockDefaultAPIGetStackCall{Call: call}
}

// MockDefaultAPIGetStackCall wrap *gomock.Call
type MockDefaultAPIGetStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIGetStackCall) Return(arg0 sdk.ApiGetStackRequest) *MockDefaultAPIGetStackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIGetStackCall) Do(f func(context.Context, string, string) sdk.ApiGetStackRequest) *MockDefaultAPIGetStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIGetStackCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiGetStackRequest) *MockDefaultAPIGetStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStackExecute mocks base method.
func (m *MockDefaultAPI) GetStackExecute(r sdk.ApiGetStackRequest) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStackExecute", r)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStackExecute indicates an expected call of GetStackExecute.
func (mr *MockDefaultAPIMockRecorder) GetStackExecute(r any) *MockDefaultAPIGetStackExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).GetStackExecute), r)
	return &MockDefaultAPIGetStackExecuteCall{Call: call}
}

// MockDefaultAPIGetStackExecuteCall wrap *gomock.Call
type MockDefaultAPIGetStackExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIGetStackExecuteCall) Return(arg0 *sdk.CreateStackResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIGetStackExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIGetStackExecuteCall) Do(f func(sdk.ApiGetStackRequest) (*sdk.CreateStackResponse, *http.Response, error)) *MockDefaultAPIGetStackExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIGetStackExecuteCall) DoAndReturn(f func(sdk.ApiGetStackRequest) (*sdk.CreateStackResponse, *http.Response, error)) *MockDefaultAPIGetStackExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFeatures mocks base method.
func (m *MockDefaultAPI) ListFeatures(ctx context.Context, organizationId string) sdk.ApiListFeaturesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatures", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiListFeaturesRequest)
	return ret0
}

// ListFeatures indicates an expected call of ListFeatures.
func (mr *MockDefaultAPIMockRecorder) ListFeatures(ctx, organizationId any) *MockDefaultAPIListFeaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatures", reflect.TypeOf((*MockDefaultAPI)(nil).ListFeatures), ctx, organizationId)
	return &MockDefaultAPIListFeaturesCall{Call: call}
}

// MockDefaultAPIListFeaturesCall wrap *gomock.Call
type MockDefaultAPIListFeaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListFeaturesCall) Return(arg0 sdk.ApiListFeaturesRequest) *MockDefaultAPIListFeaturesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListFeaturesCall) Do(f func(context.Context, string) sdk.ApiListFeaturesRequest) *MockDefaultAPIListFeaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListFeaturesCall) DoAndReturn(f func(context.Context, string) sdk.ApiListFeaturesRequest) *MockDefaultAPIListFeaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFeaturesExecute mocks base method.
func (m *MockDefaultAPI) ListFeaturesExecute(r sdk.ApiListFeaturesRequest) (*sdk.ListFeatures200Response, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeaturesExecute", r)
	ret0, _ := ret[0].(*sdk.ListFeatures200Response)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFeaturesExecute indicates an expected call of ListFeaturesExecute.
func (mr *MockDefaultAPIMockRecorder) ListFeaturesExecute(r any) *MockDefaultAPIListFeaturesExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeaturesExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListFeaturesExecute), r)
	return &MockDefaultAPIListFeaturesExecuteCall{Call: call}
}

// MockDefaultAPIListFeaturesExecuteCall wrap *gomock.Call
type MockDefaultAPIListFeaturesExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListFeaturesExecuteCall) Return(arg0 *sdk.ListFeatures200Response, arg1 *http.Response, arg2 error) *MockDefaultAPIListFeaturesExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListFeaturesExecuteCall) Do(f func(sdk.ApiListFeaturesRequest) (*sdk.ListFeatures200Response, *http.Response, error)) *MockDefaultAPIListFeaturesExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListFeaturesExecuteCall) DoAndReturn(f func(sdk.ApiListFeaturesRequest) (*sdk.ListFeatures200Response, *http.Response, error)) *MockDefaultAPIListFeaturesExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListInvitations mocks base method.
func (m *MockDefaultAPI) ListInvitations(ctx context.Context) sdk.ApiListInvitationsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", ctx)
	ret0, _ := ret[0].(sdk.ApiListInvitationsRequest)
	return ret0
}

// ListInvitations indicates an expected call of ListInvitations.
func (mr *MockDefaultAPIMockRecorder) ListInvitations(ctx any) *MockDefaultAPIListInvitationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockDefaultAPI)(nil).ListInvitations), ctx)
	return &MockDefaultAPIListInvitationsCall{Call: call}
}

// MockDefaultAPIListInvitationsCall wrap *gomock.Call
type MockDefaultAPIListInvitationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListInvitationsCall) Return(arg0 sdk.ApiListInvitationsRequest) *MockDefaultAPIListInvitationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListInvitationsCall) Do(f func(context.Context) sdk.ApiListInvitationsRequest) *MockDefaultAPIListInvitationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListInvitationsCall) DoAndReturn(f func(context.Context) sdk.ApiListInvitationsRequest) *MockDefaultAPIListInvitationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListInvitationsExecute mocks base method.
func (m *MockDefaultAPI) ListInvitationsExecute(r sdk.ApiListInvitationsRequest) (*sdk.ListInvitationsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitationsExecute", r)
	ret0, _ := ret[0].(*sdk.ListInvitationsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInvitationsExecute indicates an expected call of ListInvitationsExecute.
func (mr *MockDefaultAPIMockRecorder) ListInvitationsExecute(r any) *MockDefaultAPIListInvitationsExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListInvitationsExecute), r)
	return &MockDefaultAPIListInvitationsExecuteCall{Call: call}
}

// MockDefaultAPIListInvitationsExecuteCall wrap *gomock.Call
type MockDefaultAPIListInvitationsExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListInvitationsExecuteCall) Return(arg0 *sdk.ListInvitationsResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIListInvitationsExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListInvitationsExecuteCall) Do(f func(sdk.ApiListInvitationsRequest) (*sdk.ListInvitationsResponse, *http.Response, error)) *MockDefaultAPIListInvitationsExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListInvitationsExecuteCall) DoAndReturn(f func(sdk.ApiListInvitationsRequest) (*sdk.ListInvitationsResponse, *http.Response, error)) *MockDefaultAPIListInvitationsExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLogs mocks base method.
func (m *MockDefaultAPI) ListLogs(ctx context.Context, organizationId string) sdk.ApiListLogsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogs", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiListLogsRequest)
	return ret0
}

// ListLogs indicates an expected call of ListLogs.
func (mr *MockDefaultAPIMockRecorder) ListLogs(ctx, organizationId any) *MockDefaultAPIListLogsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogs", reflect.TypeOf((*MockDefaultAPI)(nil).ListLogs), ctx, organizationId)
	return &MockDefaultAPIListLogsCall{Call: call}
}

// MockDefaultAPIListLogsCall wrap *gomock.Call
type MockDefaultAPIListLogsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListLogsCall) Return(arg0 sdk.ApiListLogsRequest) *MockDefaultAPIListLogsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListLogsCall) Do(f func(context.Context, string) sdk.ApiListLogsRequest) *MockDefaultAPIListLogsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListLogsCall) DoAndReturn(f func(context.Context, string) sdk.ApiListLogsRequest) *MockDefaultAPIListLogsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLogsExecute mocks base method.
func (m *MockDefaultAPI) ListLogsExecute(r sdk.ApiListLogsRequest) (*sdk.LogCursor, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogsExecute", r)
	ret0, _ := ret[0].(*sdk.LogCursor)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLogsExecute indicates an expected call of ListLogsExecute.
func (mr *MockDefaultAPIMockRecorder) ListLogsExecute(r any) *MockDefaultAPIListLogsExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogsExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListLogsExecute), r)
	return &MockDefaultAPIListLogsExecuteCall{Call: call}
}

// MockDefaultAPIListLogsExecuteCall wrap *gomock.Call
type MockDefaultAPIListLogsExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListLogsExecuteCall) Return(arg0 *sdk.LogCursor, arg1 *http.Response, arg2 error) *MockDefaultAPIListLogsExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListLogsExecuteCall) Do(f func(sdk.ApiListLogsRequest) (*sdk.LogCursor, *http.Response, error)) *MockDefaultAPIListLogsExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListLogsExecuteCall) DoAndReturn(f func(sdk.ApiListLogsRequest) (*sdk.LogCursor, *http.Response, error)) *MockDefaultAPIListLogsExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModules mocks base method.
func (m *MockDefaultAPI) ListModules(ctx context.Context, organizationId, stackId string) sdk.ApiListModulesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModules", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiListModulesRequest)
	return ret0
}

// ListModules indicates an expected call of ListModules.
func (mr *MockDefaultAPIMockRecorder) ListModules(ctx, organizationId, stackId any) *MockDefaultAPIListModulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModules", reflect.TypeOf((*MockDefaultAPI)(nil).ListModules), ctx, organizationId, stackId)
	return &MockDefaultAPIListModulesCall{Call: call}
}

// MockDefaultAPIListModulesCall wrap *gomock.Call
type MockDefaultAPIListModulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListModulesCall) Return(arg0 sdk.ApiListModulesRequest) *MockDefaultAPIListModulesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListModulesCall) Do(f func(context.Context, string, string) sdk.ApiListModulesRequest) *MockDefaultAPIListModulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListModulesCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiListModulesRequest) *MockDefaultAPIListModulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModulesExecute mocks base method.
func (m *MockDefaultAPI) ListModulesExecute(r sdk.ApiListModulesRequest) (*sdk.ListModulesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModulesExecute", r)
	ret0, _ := ret[0].(*sdk.ListModulesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListModulesExecute indicates an expected call of ListModulesExecute.
func (mr *MockDefaultAPIMockRecorder) ListModulesExecute(r any) *MockDefaultAPIListModulesExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModulesExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListModulesExecute), r)
	return &MockDefaultAPIListModulesExecuteCall{Call: call}
}

// MockDefaultAPIListModulesExecuteCall wrap *gomock.Call
type MockDefaultAPIListModulesExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListModulesExecuteCall) Return(arg0 *sdk.ListModulesResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIListModulesExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListModulesExecuteCall) Do(f func(sdk.ApiListModulesRequest) (*sdk.ListModulesResponse, *http.Response, error)) *MockDefaultAPIListModulesExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListModulesExecuteCall) DoAndReturn(f func(sdk.ApiListModulesRequest) (*sdk.ListModulesResponse, *http.Response, error)) *MockDefaultAPIListModulesExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOrganizationInvitations mocks base method.
func (m *MockDefaultAPI) ListOrganizationInvitations(ctx context.Context, organizationId string) sdk.ApiListOrganizationInvitationsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationInvitations", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiListOrganizationInvitationsRequest)
	return ret0
}

// ListOrganizationInvitations indicates an expected call of ListOrganizationInvitations.
func (mr *MockDefaultAPIMockRecorder) ListOrganizationInvitations(ctx, organizationId any) *MockDefaultAPIListOrganizationInvitationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationInvitations", reflect.TypeOf((*MockDefaultAPI)(nil).ListOrganizationInvitations), ctx, organizationId)
	return &MockDefaultAPIListOrganizationInvitationsCall{Call: call}
}

// MockDefaultAPIListOrganizationInvitationsCall wrap *gomock.Call
type MockDefaultAPIListOrganizationInvitationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListOrganizationInvitationsCall) Return(arg0 sdk.ApiListOrganizationInvitationsRequest) *MockDefaultAPIListOrganizationInvitationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListOrganizationInvitationsCall) Do(f func(context.Context, string) sdk.ApiListOrganizationInvitationsRequest) *MockDefaultAPIListOrganizationInvitationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListOrganizationInvitationsCall) DoAndReturn(f func(context.Context, string) sdk.ApiListOrganizationInvitationsRequest) *MockDefaultAPIListOrganizationInvitationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOrganizationInvitationsExecute mocks base method.
func (m *MockDefaultAPI) ListOrganizationInvitationsExecute(r sdk.ApiListOrganizationInvitationsRequest) (*sdk.ListInvitationsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationInvitationsExecute", r)
	ret0, _ := ret[0].(*sdk.ListInvitationsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationInvitationsExecute indicates an expected call of ListOrganizationInvitationsExecute.
func (mr *MockDefaultAPIMockRecorder) ListOrganizationInvitationsExecute(r any) *MockDefaultAPIListOrganizationInvitationsExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationInvitationsExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListOrganizationInvitationsExecute), r)
	return &MockDefaultAPIListOrganizationInvitationsExecuteCall{Call: call}
}

// MockDefaultAPIListOrganizationInvitationsExecuteCall wrap *gomock.Call
type MockDefaultAPIListOrganizationInvitationsExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListOrganizationInvitationsExecuteCall) Return(arg0 *sdk.ListInvitationsResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIListOrganizationInvitationsExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListOrganizationInvitationsExecuteCall) Do(f func(sdk.ApiListOrganizationInvitationsRequest) (*sdk.ListInvitationsResponse, *http.Response, error)) *MockDefaultAPIListOrganizationInvitationsExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListOrganizationInvitationsExecuteCall) DoAndReturn(f func(sdk.ApiListOrganizationInvitationsRequest) (*sdk.ListInvitationsResponse, *http.Response, error)) *MockDefaultAPIListOrganizationInvitationsExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOrganizations mocks base method.
func (m *MockDefaultAPI) ListOrganizations(ctx context.Context) sdk.ApiListOrganizationsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", ctx)
	ret0, _ := ret[0].(sdk.ApiListOrganizationsRequest)
	return ret0
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockDefaultAPIMockRecorder) ListOrganizations(ctx any) *MockDefaultAPIListOrganizationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockDefaultAPI)(nil).ListOrganizations), ctx)
	return &MockDefaultAPIListOrganizationsCall{Call: call}
}

// MockDefaultAPIListOrganizationsCall wrap *gomock.Call
type MockDefaultAPIListOrganizationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListOrganizationsCall) Return(arg0 sdk.ApiListOrganizationsRequest) *MockDefaultAPIListOrganizationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListOrganizationsCall) Do(f func(context.Context) sdk.ApiListOrganizationsRequest) *MockDefaultAPIListOrganizationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListOrganizationsCall) DoAndReturn(f func(context.Context) sdk.ApiListOrganizationsRequest) *MockDefaultAPIListOrganizationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOrganizationsExecute mocks base method.
func (m *MockDefaultAPI) ListOrganizationsExecute(r sdk.ApiListOrganizationsRequest) (*sdk.ListOrganizationExpandedResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationsExecute", r)
	ret0, _ := ret[0].(*sdk.ListOrganizationExpandedResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationsExecute indicates an expected call of ListOrganizationsExecute.
func (mr *MockDefaultAPIMockRecorder) ListOrganizationsExecute(r any) *MockDefaultAPIListOrganizationsExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationsExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListOrganizationsExecute), r)
	return &MockDefaultAPIListOrganizationsExecuteCall{Call: call}
}

// MockDefaultAPIListOrganizationsExecuteCall wrap *gomock.Call
type MockDefaultAPIListOrganizationsExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListOrganizationsExecuteCall) Return(arg0 *sdk.ListOrganizationExpandedResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIListOrganizationsExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListOrganizationsExecuteCall) Do(f func(sdk.ApiListOrganizationsRequest) (*sdk.ListOrganizationExpandedResponse, *http.Response, error)) *MockDefaultAPIListOrganizationsExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListOrganizationsExecuteCall) DoAndReturn(f func(sdk.ApiListOrganizationsRequest) (*sdk.ListOrganizationExpandedResponse, *http.Response, error)) *MockDefaultAPIListOrganizationsExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOrganizationsExpanded mocks base method.
func (m *MockDefaultAPI) ListOrganizationsExpanded(ctx context.Context) sdk.ApiListOrganizationsExpandedRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationsExpanded", ctx)
	ret0, _ := ret[0].(sdk.ApiListOrganizationsExpandedRequest)
	return ret0
}

// ListOrganizationsExpanded indicates an expected call of ListOrganizationsExpanded.
func (mr *MockDefaultAPIMockRecorder) ListOrganizationsExpanded(ctx any) *MockDefaultAPIListOrganizationsExpandedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationsExpanded", reflect.TypeOf((*MockDefaultAPI)(nil).ListOrganizationsExpanded), ctx)
	return &MockDefaultAPIListOrganizationsExpandedCall{Call: call}
}

// MockDefaultAPIListOrganizationsExpandedCall wrap *gomock.Call
type MockDefaultAPIListOrganizationsExpandedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListOrganizationsExpandedCall) Return(arg0 sdk.ApiListOrganizationsExpandedRequest) *MockDefaultAPIListOrganizationsExpandedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListOrganizationsExpandedCall) Do(f func(context.Context) sdk.ApiListOrganizationsExpandedRequest) *MockDefaultAPIListOrganizationsExpandedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListOrganizationsExpandedCall) DoAndReturn(f func(context.Context) sdk.ApiListOrganizationsExpandedRequest) *MockDefaultAPIListOrganizationsExpandedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOrganizationsExpandedExecute mocks base method.
func (m *MockDefaultAPI) ListOrganizationsExpandedExecute(r sdk.ApiListOrganizationsExpandedRequest) (*sdk.ListOrganizationExpandedResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationsExpandedExecute", r)
	ret0, _ := ret[0].(*sdk.ListOrganizationExpandedResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationsExpandedExecute indicates an expected call of ListOrganizationsExpandedExecute.
func (mr *MockDefaultAPIMockRecorder) ListOrganizationsExpandedExecute(r any) *MockDefaultAPIListOrganizationsExpandedExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationsExpandedExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListOrganizationsExpandedExecute), r)
	return &MockDefaultAPIListOrganizationsExpandedExecuteCall{Call: call}
}

// MockDefaultAPIListOrganizationsExpandedExecuteCall wrap *gomock.Call
type MockDefaultAPIListOrganizationsExpandedExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListOrganizationsExpandedExecuteCall) Return(arg0 *sdk.ListOrganizationExpandedResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIListOrganizationsExpandedExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListOrganizationsExpandedExecuteCall) Do(f func(sdk.ApiListOrganizationsExpandedRequest) (*sdk.ListOrganizationExpandedResponse, *http.Response, error)) *MockDefaultAPIListOrganizationsExpandedExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListOrganizationsExpandedExecuteCall) DoAndReturn(f func(sdk.ApiListOrganizationsExpandedRequest) (*sdk.ListOrganizationExpandedResponse, *http.Response, error)) *MockDefaultAPIListOrganizationsExpandedExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListRegions mocks base method.
func (m *MockDefaultAPI) ListRegions(ctx context.Context, organizationId string) sdk.ApiListRegionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegions", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiListRegionsRequest)
	return ret0
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockDefaultAPIMockRecorder) ListRegions(ctx, organizationId any) *MockDefaultAPIListRegionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockDefaultAPI)(nil).ListRegions), ctx, organizationId)
	return &MockDefaultAPIListRegionsCall{Call: call}
}

// MockDefaultAPIListRegionsCall wrap *gomock.Call
type MockDefaultAPIListRegionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListRegionsCall) Return(arg0 sdk.ApiListRegionsRequest) *MockDefaultAPIListRegionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListRegionsCall) Do(f func(context.Context, string) sdk.ApiListRegionsRequest) *MockDefaultAPIListRegionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListRegionsCall) DoAndReturn(f func(context.Context, string) sdk.ApiListRegionsRequest) *MockDefaultAPIListRegionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListRegionsExecute mocks base method.
func (m *MockDefaultAPI) ListRegionsExecute(r sdk.ApiListRegionsRequest) (*sdk.ListRegionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegionsExecute", r)
	ret0, _ := ret[0].(*sdk.ListRegionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRegionsExecute indicates an expected call of ListRegionsExecute.
func (mr *MockDefaultAPIMockRecorder) ListRegionsExecute(r any) *MockDefaultAPIListRegionsExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegionsExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListRegionsExecute), r)
	return &MockDefaultAPIListRegionsExecuteCall{Call: call}
}

// MockDefaultAPIListRegionsExecuteCall wrap *gomock.Call
type MockDefaultAPIListRegionsExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListRegionsExecuteCall) Return(arg0 *sdk.ListRegionsResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIListRegionsExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListRegionsExecuteCall) Do(f func(sdk.ApiListRegionsRequest) (*sdk.ListRegionsResponse, *http.Response, error)) *MockDefaultAPIListRegionsExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListRegionsExecuteCall) DoAndReturn(f func(sdk.ApiListRegionsRequest) (*sdk.ListRegionsResponse, *http.Response, error)) *MockDefaultAPIListRegionsExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStackUsersAccesses mocks base method.
func (m *MockDefaultAPI) ListStackUsersAccesses(ctx context.Context, organizationId, stackId string) sdk.ApiListStackUsersAccessesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStackUsersAccesses", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiListStackUsersAccessesRequest)
	return ret0
}

// ListStackUsersAccesses indicates an expected call of ListStackUsersAccesses.
func (mr *MockDefaultAPIMockRecorder) ListStackUsersAccesses(ctx, organizationId, stackId any) *MockDefaultAPIListStackUsersAccessesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackUsersAccesses", reflect.TypeOf((*MockDefaultAPI)(nil).ListStackUsersAccesses), ctx, organizationId, stackId)
	return &MockDefaultAPIListStackUsersAccessesCall{Call: call}
}

// MockDefaultAPIListStackUsersAccessesCall wrap *gomock.Call
type MockDefaultAPIListStackUsersAccessesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListStackUsersAccessesCall) Return(arg0 sdk.ApiListStackUsersAccessesRequest) *MockDefaultAPIListStackUsersAccessesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListStackUsersAccessesCall) Do(f func(context.Context, string, string) sdk.ApiListStackUsersAccessesRequest) *MockDefaultAPIListStackUsersAccessesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListStackUsersAccessesCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiListStackUsersAccessesRequest) *MockDefaultAPIListStackUsersAccessesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStackUsersAccessesExecute mocks base method.
func (m *MockDefaultAPI) ListStackUsersAccessesExecute(r sdk.ApiListStackUsersAccessesRequest) (*sdk.StackUserAccessResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStackUsersAccessesExecute", r)
	ret0, _ := ret[0].(*sdk.StackUserAccessResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStackUsersAccessesExecute indicates an expected call of ListStackUsersAccessesExecute.
func (mr *MockDefaultAPIMockRecorder) ListStackUsersAccessesExecute(r any) *MockDefaultAPIListStackUsersAccessesExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackUsersAccessesExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListStackUsersAccessesExecute), r)
	return &MockDefaultAPIListStackUsersAccessesExecuteCall{Call: call}
}

// MockDefaultAPIListStackUsersAccessesExecuteCall wrap *gomock.Call
type MockDefaultAPIListStackUsersAccessesExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListStackUsersAccessesExecuteCall) Return(arg0 *sdk.StackUserAccessResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIListStackUsersAccessesExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListStackUsersAccessesExecuteCall) Do(f func(sdk.ApiListStackUsersAccessesRequest) (*sdk.StackUserAccessResponse, *http.Response, error)) *MockDefaultAPIListStackUsersAccessesExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListStackUsersAccessesExecuteCall) DoAndReturn(f func(sdk.ApiListStackUsersAccessesRequest) (*sdk.StackUserAccessResponse, *http.Response, error)) *MockDefaultAPIListStackUsersAccessesExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStacks mocks base method.
func (m *MockDefaultAPI) ListStacks(ctx context.Context, organizationId string) sdk.ApiListStacksRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStacks", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiListStacksRequest)
	return ret0
}

// ListStacks indicates an expected call of ListStacks.
func (mr *MockDefaultAPIMockRecorder) ListStacks(ctx, organizationId any) *MockDefaultAPIListStacksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStacks", reflect.TypeOf((*MockDefaultAPI)(nil).ListStacks), ctx, organizationId)
	return &MockDefaultAPIListStacksCall{Call: call}
}

// MockDefaultAPIListStacksCall wrap *gomock.Call
type MockDefaultAPIListStacksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListStacksCall) Return(arg0 sdk.ApiListStacksRequest) *MockDefaultAPIListStacksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListStacksCall) Do(f func(context.Context, string) sdk.ApiListStacksRequest) *MockDefaultAPIListStacksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListStacksCall) DoAndReturn(f func(context.Context, string) sdk.ApiListStacksRequest) *MockDefaultAPIListStacksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStacksExecute mocks base method.
func (m *MockDefaultAPI) ListStacksExecute(r sdk.ApiListStacksRequest) (*sdk.ListStacksResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStacksExecute", r)
	ret0, _ := ret[0].(*sdk.ListStacksResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStacksExecute indicates an expected call of ListStacksExecute.
func (mr *MockDefaultAPIMockRecorder) ListStacksExecute(r any) *MockDefaultAPIListStacksExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStacksExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListStacksExecute), r)
	return &MockDefaultAPIListStacksExecuteCall{Call: call}
}

// MockDefaultAPIListStacksExecuteCall wrap *gomock.Call
type MockDefaultAPIListStacksExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListStacksExecuteCall) Return(arg0 *sdk.ListStacksResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIListStacksExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListStacksExecuteCall) Do(f func(sdk.ApiListStacksRequest) (*sdk.ListStacksResponse, *http.Response, error)) *MockDefaultAPIListStacksExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListStacksExecuteCall) DoAndReturn(f func(sdk.ApiListStacksRequest) (*sdk.ListStacksResponse, *http.Response, error)) *MockDefaultAPIListStacksExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsersOfOrganization mocks base method.
func (m *MockDefaultAPI) ListUsersOfOrganization(ctx context.Context, organizationId string) sdk.ApiListUsersOfOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersOfOrganization", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiListUsersOfOrganizationRequest)
	return ret0
}

// ListUsersOfOrganization indicates an expected call of ListUsersOfOrganization.
func (mr *MockDefaultAPIMockRecorder) ListUsersOfOrganization(ctx, organizationId any) *MockDefaultAPIListUsersOfOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersOfOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).ListUsersOfOrganization), ctx, organizationId)
	return &MockDefaultAPIListUsersOfOrganizationCall{Call: call}
}

// MockDefaultAPIListUsersOfOrganizationCall wrap *gomock.Call
type MockDefaultAPIListUsersOfOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListUsersOfOrganizationCall) Return(arg0 sdk.ApiListUsersOfOrganizationRequest) *MockDefaultAPIListUsersOfOrganizationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListUsersOfOrganizationCall) Do(f func(context.Context, string) sdk.ApiListUsersOfOrganizationRequest) *MockDefaultAPIListUsersOfOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListUsersOfOrganizationCall) DoAndReturn(f func(context.Context, string) sdk.ApiListUsersOfOrganizationRequest) *MockDefaultAPIListUsersOfOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsersOfOrganizationExecute mocks base method.
func (m *MockDefaultAPI) ListUsersOfOrganizationExecute(r sdk.ApiListUsersOfOrganizationRequest) (*sdk.ListUsersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersOfOrganizationExecute", r)
	ret0, _ := ret[0].(*sdk.ListUsersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsersOfOrganizationExecute indicates an expected call of ListUsersOfOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) ListUsersOfOrganizationExecute(r any) *MockDefaultAPIListUsersOfOrganizationExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersOfOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListUsersOfOrganizationExecute), r)
	return &MockDefaultAPIListUsersOfOrganizationExecuteCall{Call: call}
}

// MockDefaultAPIListUsersOfOrganizationExecuteCall wrap *gomock.Call
type MockDefaultAPIListUsersOfOrganizationExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIListUsersOfOrganizationExecuteCall) Return(arg0 *sdk.ListUsersResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIListUsersOfOrganizationExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIListUsersOfOrganizationExecuteCall) Do(f func(sdk.ApiListUsersOfOrganizationRequest) (*sdk.ListUsersResponse, *http.Response, error)) *MockDefaultAPIListUsersOfOrganizationExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIListUsersOfOrganizationExecuteCall) DoAndReturn(f func(sdk.ApiListUsersOfOrganizationRequest) (*sdk.ListUsersResponse, *http.Response, error)) *MockDefaultAPIListUsersOfOrganizationExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OrganizationClientCreate mocks base method.
func (m *MockDefaultAPI) OrganizationClientCreate(ctx context.Context, organizationId string) sdk.ApiOrganizationClientCreateRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationClientCreate", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiOrganizationClientCreateRequest)
	return ret0
}

// OrganizationClientCreate indicates an expected call of OrganizationClientCreate.
func (mr *MockDefaultAPIMockRecorder) OrganizationClientCreate(ctx, organizationId any) *MockDefaultAPIOrganizationClientCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationClientCreate", reflect.TypeOf((*MockDefaultAPI)(nil).OrganizationClientCreate), ctx, organizationId)
	return &MockDefaultAPIOrganizationClientCreateCall{Call: call}
}

// MockDefaultAPIOrganizationClientCreateCall wrap *gomock.Call
type MockDefaultAPIOrganizationClientCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIOrganizationClientCreateCall) Return(arg0 sdk.ApiOrganizationClientCreateRequest) *MockDefaultAPIOrganizationClientCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIOrganizationClientCreateCall) Do(f func(context.Context, string) sdk.ApiOrganizationClientCreateRequest) *MockDefaultAPIOrganizationClientCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIOrganizationClientCreateCall) DoAndReturn(f func(context.Context, string) sdk.ApiOrganizationClientCreateRequest) *MockDefaultAPIOrganizationClientCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OrganizationClientCreateExecute mocks base method.
func (m *MockDefaultAPI) OrganizationClientCreateExecute(r sdk.ApiOrganizationClientCreateRequest) (*sdk.CreateOrganizationClientResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationClientCreateExecute", r)
	ret0, _ := ret[0].(*sdk.CreateOrganizationClientResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OrganizationClientCreateExecute indicates an expected call of OrganizationClientCreateExecute.
func (mr *MockDefaultAPIMockRecorder) OrganizationClientCreateExecute(r any) *MockDefaultAPIOrganizationClientCreateExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationClientCreateExecute", reflect.TypeOf((*MockDefaultAPI)(nil).OrganizationClientCreateExecute), r)
	return &MockDefaultAPIOrganizationClientCreateExecuteCall{Call: call}
}

// MockDefaultAPIOrganizationClientCreateExecuteCall wrap *gomock.Call
type MockDefaultAPIOrganizationClientCreateExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIOrganizationClientCreateExecuteCall) Return(arg0 *sdk.CreateOrganizationClientResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIOrganizationClientCreateExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIOrganizationClientCreateExecuteCall) Do(f func(sdk.ApiOrganizationClientCreateRequest) (*sdk.CreateOrganizationClientResponse, *http.Response, error)) *MockDefaultAPIOrganizationClientCreateExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIOrganizationClientCreateExecuteCall) DoAndReturn(f func(sdk.ApiOrganizationClientCreateRequest) (*sdk.CreateOrganizationClientResponse, *http.Response, error)) *MockDefaultAPIOrganizationClientCreateExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OrganizationClientDelete mocks base method.
func (m *MockDefaultAPI) OrganizationClientDelete(ctx context.Context, organizationId, clientId string) sdk.ApiOrganizationClientDeleteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationClientDelete", ctx, organizationId, clientId)
	ret0, _ := ret[0].(sdk.ApiOrganizationClientDeleteRequest)
	return ret0
}

// OrganizationClientDelete indicates an expected call of OrganizationClientDelete.
func (mr *MockDefaultAPIMockRecorder) OrganizationClientDelete(ctx, organizationId, clientId any) *MockDefaultAPIOrganizationClientDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationClientDelete", reflect.TypeOf((*MockDefaultAPI)(nil).OrganizationClientDelete), ctx, organizationId, clientId)
	return &MockDefaultAPIOrganizationClientDeleteCall{Call: call}
}

// MockDefaultAPIOrganizationClientDeleteCall wrap *gomock.Call
type MockDefaultAPIOrganizationClientDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIOrganizationClientDeleteCall) Return(arg0 sdk.ApiOrganizationClientDeleteRequest) *MockDefaultAPIOrganizationClientDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIOrganizationClientDeleteCall) Do(f func(context.Context, string, string) sdk.ApiOrganizationClientDeleteRequest) *MockDefaultAPIOrganizationClientDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIOrganizationClientDeleteCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiOrganizationClientDeleteRequest) *MockDefaultAPIOrganizationClientDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OrganizationClientDeleteExecute mocks base method.
func (m *MockDefaultAPI) OrganizationClientDeleteExecute(r sdk.ApiOrganizationClientDeleteRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationClientDeleteExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationClientDeleteExecute indicates an expected call of OrganizationClientDeleteExecute.
func (mr *MockDefaultAPIMockRecorder) OrganizationClientDeleteExecute(r any) *MockDefaultAPIOrganizationClientDeleteExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationClientDeleteExecute", reflect.TypeOf((*MockDefaultAPI)(nil).OrganizationClientDeleteExecute), r)
	return &MockDefaultAPIOrganizationClientDeleteExecuteCall{Call: call}
}

// MockDefaultAPIOrganizationClientDeleteExecuteCall wrap *gomock.Call
type MockDefaultAPIOrganizationClientDeleteExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIOrganizationClientDeleteExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIOrganizationClientDeleteExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIOrganizationClientDeleteExecuteCall) Do(f func(sdk.ApiOrganizationClientDeleteRequest) (*http.Response, error)) *MockDefaultAPIOrganizationClientDeleteExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIOrganizationClientDeleteExecuteCall) DoAndReturn(f func(sdk.ApiOrganizationClientDeleteRequest) (*http.Response, error)) *MockDefaultAPIOrganizationClientDeleteExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OrganizationClientRead mocks base method.
func (m *MockDefaultAPI) OrganizationClientRead(ctx context.Context, organizationId, clientId string) sdk.ApiOrganizationClientReadRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationClientRead", ctx, organizationId, clientId)
	ret0, _ := ret[0].(sdk.ApiOrganizationClientReadRequest)
	return ret0
}

// OrganizationClientRead indicates an expected call of OrganizationClientRead.
func (mr *MockDefaultAPIMockRecorder) OrganizationClientRead(ctx, organizationId, clientId any) *MockDefaultAPIOrganizationClientReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationClientRead", reflect.TypeOf((*MockDefaultAPI)(nil).OrganizationClientRead), ctx, organizationId, clientId)
	return &MockDefaultAPIOrganizationClientReadCall{Call: call}
}

// MockDefaultAPIOrganizationClientReadCall wrap *gomock.Call
type MockDefaultAPIOrganizationClientReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIOrganizationClientReadCall) Return(arg0 sdk.ApiOrganizationClientReadRequest) *MockDefaultAPIOrganizationClientReadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIOrganizationClientReadCall) Do(f func(context.Context, string, string) sdk.ApiOrganizationClientReadRequest) *MockDefaultAPIOrganizationClientReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIOrganizationClientReadCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiOrganizationClientReadRequest) *MockDefaultAPIOrganizationClientReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OrganizationClientReadExecute mocks base method.
func (m *MockDefaultAPI) OrganizationClientReadExecute(r sdk.ApiOrganizationClientReadRequest) (*sdk.ReadOrganizationClientResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationClientReadExecute", r)
	ret0, _ := ret[0].(*sdk.ReadOrganizationClientResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OrganizationClientReadExecute indicates an expected call of OrganizationClientReadExecute.
func (mr *MockDefaultAPIMockRecorder) OrganizationClientReadExecute(r any) *MockDefaultAPIOrganizationClientReadExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationClientReadExecute", reflect.TypeOf((*MockDefaultAPI)(nil).OrganizationClientReadExecute), r)
	return &MockDefaultAPIOrganizationClientReadExecuteCall{Call: call}
}

// MockDefaultAPIOrganizationClientReadExecuteCall wrap *gomock.Call
type MockDefaultAPIOrganizationClientReadExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIOrganizationClientReadExecuteCall) Return(arg0 *sdk.ReadOrganizationClientResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIOrganizationClientReadExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIOrganizationClientReadExecuteCall) Do(f func(sdk.ApiOrganizationClientReadRequest) (*sdk.ReadOrganizationClientResponse, *http.Response, error)) *MockDefaultAPIOrganizationClientReadExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIOrganizationClientReadExecuteCall) DoAndReturn(f func(sdk.ApiOrganizationClientReadRequest) (*sdk.ReadOrganizationClientResponse, *http.Response, error)) *MockDefaultAPIOrganizationClientReadExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OrganizationClientsRead mocks base method.
func (m *MockDefaultAPI) OrganizationClientsRead(ctx context.Context, organizationId string) sdk.ApiOrganizationClientsReadRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationClientsRead", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiOrganizationClientsReadRequest)
	return ret0
}

// OrganizationClientsRead indicates an expected call of OrganizationClientsRead.
func (mr *MockDefaultAPIMockRecorder) OrganizationClientsRead(ctx, organizationId any) *MockDefaultAPIOrganizationClientsReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationClientsRead", reflect.TypeOf((*MockDefaultAPI)(nil).OrganizationClientsRead), ctx, organizationId)
	return &MockDefaultAPIOrganizationClientsReadCall{Call: call}
}

// MockDefaultAPIOrganizationClientsReadCall wrap *gomock.Call
type MockDefaultAPIOrganizationClientsReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIOrganizationClientsReadCall) Return(arg0 sdk.ApiOrganizationClientsReadRequest) *MockDefaultAPIOrganizationClientsReadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIOrganizationClientsReadCall) Do(f func(context.Context, string) sdk.ApiOrganizationClientsReadRequest) *MockDefaultAPIOrganizationClientsReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIOrganizationClientsReadCall) DoAndReturn(f func(context.Context, string) sdk.ApiOrganizationClientsReadRequest) *MockDefaultAPIOrganizationClientsReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OrganizationClientsReadExecute mocks base method.
func (m *MockDefaultAPI) OrganizationClientsReadExecute(r sdk.ApiOrganizationClientsReadRequest) (*sdk.ReadOrganizationClientsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationClientsReadExecute", r)
	ret0, _ := ret[0].(*sdk.ReadOrganizationClientsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OrganizationClientsReadExecute indicates an expected call of OrganizationClientsReadExecute.
func (mr *MockDefaultAPIMockRecorder) OrganizationClientsReadExecute(r any) *MockDefaultAPIOrganizationClientsReadExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationClientsReadExecute", reflect.TypeOf((*MockDefaultAPI)(nil).OrganizationClientsReadExecute), r)
	return &MockDefaultAPIOrganizationClientsReadExecuteCall{Call: call}
}

// MockDefaultAPIOrganizationClientsReadExecuteCall wrap *gomock.Call
type MockDefaultAPIOrganizationClientsReadExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIOrganizationClientsReadExecuteCall) Return(arg0 *sdk.ReadOrganizationClientsResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIOrganizationClientsReadExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIOrganizationClientsReadExecuteCall) Do(f func(sdk.ApiOrganizationClientsReadRequest) (*sdk.ReadOrganizationClientsResponse, *http.Response, error)) *MockDefaultAPIOrganizationClientsReadExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIOrganizationClientsReadExecuteCall) DoAndReturn(f func(sdk.ApiOrganizationClientsReadRequest) (*sdk.ReadOrganizationClientsResponse, *http.Response, error)) *MockDefaultAPIOrganizationClientsReadExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAuthenticationProvider mocks base method.
func (m *MockDefaultAPI) ReadAuthenticationProvider(ctx context.Context, organizationId string) sdk.ApiReadAuthenticationProviderRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthenticationProvider", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiReadAuthenticationProviderRequest)
	return ret0
}

// ReadAuthenticationProvider indicates an expected call of ReadAuthenticationProvider.
func (mr *MockDefaultAPIMockRecorder) ReadAuthenticationProvider(ctx, organizationId any) *MockDefaultAPIReadAuthenticationProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthenticationProvider", reflect.TypeOf((*MockDefaultAPI)(nil).ReadAuthenticationProvider), ctx, organizationId)
	return &MockDefaultAPIReadAuthenticationProviderCall{Call: call}
}

// MockDefaultAPIReadAuthenticationProviderCall wrap *gomock.Call
type MockDefaultAPIReadAuthenticationProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIReadAuthenticationProviderCall) Return(arg0 sdk.ApiReadAuthenticationProviderRequest) *MockDefaultAPIReadAuthenticationProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIReadAuthenticationProviderCall) Do(f func(context.Context, string) sdk.ApiReadAuthenticationProviderRequest) *MockDefaultAPIReadAuthenticationProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIReadAuthenticationProviderCall) DoAndReturn(f func(context.Context, string) sdk.ApiReadAuthenticationProviderRequest) *MockDefaultAPIReadAuthenticationProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAuthenticationProviderExecute mocks base method.
func (m *MockDefaultAPI) ReadAuthenticationProviderExecute(r sdk.ApiReadAuthenticationProviderRequest) (*sdk.AuthenticationProviderResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAuthenticationProviderExecute", r)
	ret0, _ := ret[0].(*sdk.AuthenticationProviderResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadAuthenticationProviderExecute indicates an expected call of ReadAuthenticationProviderExecute.
func (mr *MockDefaultAPIMockRecorder) ReadAuthenticationProviderExecute(r any) *MockDefaultAPIReadAuthenticationProviderExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAuthenticationProviderExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ReadAuthenticationProviderExecute), r)
	return &MockDefaultAPIReadAuthenticationProviderExecuteCall{Call: call}
}

// MockDefaultAPIReadAuthenticationProviderExecuteCall wrap *gomock.Call
type MockDefaultAPIReadAuthenticationProviderExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIReadAuthenticationProviderExecuteCall) Return(arg0 *sdk.AuthenticationProviderResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIReadAuthenticationProviderExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIReadAuthenticationProviderExecuteCall) Do(f func(sdk.ApiReadAuthenticationProviderRequest) (*sdk.AuthenticationProviderResponse, *http.Response, error)) *MockDefaultAPIReadAuthenticationProviderExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIReadAuthenticationProviderExecuteCall) DoAndReturn(f func(sdk.ApiReadAuthenticationProviderRequest) (*sdk.AuthenticationProviderResponse, *http.Response, error)) *MockDefaultAPIReadAuthenticationProviderExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadConnectedUser mocks base method.
func (m *MockDefaultAPI) ReadConnectedUser(ctx context.Context) sdk.ApiReadConnectedUserRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConnectedUser", ctx)
	ret0, _ := ret[0].(sdk.ApiReadConnectedUserRequest)
	return ret0
}

// ReadConnectedUser indicates an expected call of ReadConnectedUser.
func (mr *MockDefaultAPIMockRecorder) ReadConnectedUser(ctx any) *MockDefaultAPIReadConnectedUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConnectedUser", reflect.TypeOf((*MockDefaultAPI)(nil).ReadConnectedUser), ctx)
	return &MockDefaultAPIReadConnectedUserCall{Call: call}
}

// MockDefaultAPIReadConnectedUserCall wrap *gomock.Call
type MockDefaultAPIReadConnectedUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIReadConnectedUserCall) Return(arg0 sdk.ApiReadConnectedUserRequest) *MockDefaultAPIReadConnectedUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIReadConnectedUserCall) Do(f func(context.Context) sdk.ApiReadConnectedUserRequest) *MockDefaultAPIReadConnectedUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIReadConnectedUserCall) DoAndReturn(f func(context.Context) sdk.ApiReadConnectedUserRequest) *MockDefaultAPIReadConnectedUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadConnectedUserExecute mocks base method.
func (m *MockDefaultAPI) ReadConnectedUserExecute(r sdk.ApiReadConnectedUserRequest) (*sdk.ReadUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConnectedUserExecute", r)
	ret0, _ := ret[0].(*sdk.ReadUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadConnectedUserExecute indicates an expected call of ReadConnectedUserExecute.
func (mr *MockDefaultAPIMockRecorder) ReadConnectedUserExecute(r any) *MockDefaultAPIReadConnectedUserExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConnectedUserExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ReadConnectedUserExecute), r)
	return &MockDefaultAPIReadConnectedUserExecuteCall{Call: call}
}

// MockDefaultAPIReadConnectedUserExecuteCall wrap *gomock.Call
type MockDefaultAPIReadConnectedUserExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIReadConnectedUserExecuteCall) Return(arg0 *sdk.ReadUserResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIReadConnectedUserExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIReadConnectedUserExecuteCall) Do(f func(sdk.ApiReadConnectedUserRequest) (*sdk.ReadUserResponse, *http.Response, error)) *MockDefaultAPIReadConnectedUserExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIReadConnectedUserExecuteCall) DoAndReturn(f func(sdk.ApiReadConnectedUserRequest) (*sdk.ReadUserResponse, *http.Response, error)) *MockDefaultAPIReadConnectedUserExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadOrganization mocks base method.
func (m *MockDefaultAPI) ReadOrganization(ctx context.Context, organizationId string) sdk.ApiReadOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOrganization", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiReadOrganizationRequest)
	return ret0
}

// ReadOrganization indicates an expected call of ReadOrganization.
func (mr *MockDefaultAPIMockRecorder) ReadOrganization(ctx, organizationId any) *MockDefaultAPIReadOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).ReadOrganization), ctx, organizationId)
	return &MockDefaultAPIReadOrganizationCall{Call: call}
}

// MockDefaultAPIReadOrganizationCall wrap *gomock.Call
type MockDefaultAPIReadOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIReadOrganizationCall) Return(arg0 sdk.ApiReadOrganizationRequest) *MockDefaultAPIReadOrganizationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIReadOrganizationCall) Do(f func(context.Context, string) sdk.ApiReadOrganizationRequest) *MockDefaultAPIReadOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIReadOrganizationCall) DoAndReturn(f func(context.Context, string) sdk.ApiReadOrganizationRequest) *MockDefaultAPIReadOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadOrganizationClient mocks base method.
func (m *MockDefaultAPI) ReadOrganizationClient(ctx context.Context, organizationId string) sdk.ApiReadOrganizationClientRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOrganizationClient", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiReadOrganizationClientRequest)
	return ret0
}

// ReadOrganizationClient indicates an expected call of ReadOrganizationClient.
func (mr *MockDefaultAPIMockRecorder) ReadOrganizationClient(ctx, organizationId any) *MockDefaultAPIReadOrganizationClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrganizationClient", reflect.TypeOf((*MockDefaultAPI)(nil).ReadOrganizationClient), ctx, organizationId)
	return &MockDefaultAPIReadOrganizationClientCall{Call: call}
}

// MockDefaultAPIReadOrganizationClientCall wrap *gomock.Call
type MockDefaultAPIReadOrganizationClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIReadOrganizationClientCall) Return(arg0 sdk.ApiReadOrganizationClientRequest) *MockDefaultAPIReadOrganizationClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIReadOrganizationClientCall) Do(f func(context.Context, string) sdk.ApiReadOrganizationClientRequest) *MockDefaultAPIReadOrganizationClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIReadOrganizationClientCall) DoAndReturn(f func(context.Context, string) sdk.ApiReadOrganizationClientRequest) *MockDefaultAPIReadOrganizationClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadOrganizationClientExecute mocks base method.
func (m *MockDefaultAPI) ReadOrganizationClientExecute(r sdk.ApiReadOrganizationClientRequest) (*sdk.CreateOrganizationClientResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOrganizationClientExecute", r)
	ret0, _ := ret[0].(*sdk.CreateOrganizationClientResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadOrganizationClientExecute indicates an expected call of ReadOrganizationClientExecute.
func (mr *MockDefaultAPIMockRecorder) ReadOrganizationClientExecute(r any) *MockDefaultAPIReadOrganizationClientExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrganizationClientExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ReadOrganizationClientExecute), r)
	return &MockDefaultAPIReadOrganizationClientExecuteCall{Call: call}
}

// MockDefaultAPIReadOrganizationClientExecuteCall wrap *gomock.Call
type MockDefaultAPIReadOrganizationClientExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIReadOrganizationClientExecuteCall) Return(arg0 *sdk.CreateOrganizationClientResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIReadOrganizationClientExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIReadOrganizationClientExecuteCall) Do(f func(sdk.ApiReadOrganizationClientRequest) (*sdk.CreateOrganizationClientResponse, *http.Response, error)) *MockDefaultAPIReadOrganizationClientExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIReadOrganizationClientExecuteCall) DoAndReturn(f func(sdk.ApiReadOrganizationClientRequest) (*sdk.CreateOrganizationClientResponse, *http.Response, error)) *MockDefaultAPIReadOrganizationClientExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadOrganizationExecute mocks base method.
func (m *MockDefaultAPI) ReadOrganizationExecute(r sdk.ApiReadOrganizationRequest) (*sdk.ReadOrganizationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOrganizationExecute", r)
	ret0, _ := ret[0].(*sdk.ReadOrganizationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadOrganizationExecute indicates an expected call of ReadOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) ReadOrganizationExecute(r any) *MockDefaultAPIReadOrganizationExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ReadOrganizationExecute), r)
	return &MockDefaultAPIReadOrganizationExecuteCall{Call: call}
}

// MockDefaultAPIReadOrganizationExecuteCall wrap *gomock.Call
type MockDefaultAPIReadOrganizationExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIReadOrganizationExecuteCall) Return(arg0 *sdk.ReadOrganizationResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIReadOrganizationExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIReadOrganizationExecuteCall) Do(f func(sdk.ApiReadOrganizationRequest) (*sdk.ReadOrganizationResponse, *http.Response, error)) *MockDefaultAPIReadOrganizationExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIReadOrganizationExecuteCall) DoAndReturn(f func(sdk.ApiReadOrganizationRequest) (*sdk.ReadOrganizationResponse, *http.Response, error)) *MockDefaultAPIReadOrganizationExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadStackUserAccess mocks base method.
func (m *MockDefaultAPI) ReadStackUserAccess(ctx context.Context, organizationId, stackId, userId string) sdk.ApiReadStackUserAccessRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStackUserAccess", ctx, organizationId, stackId, userId)
	ret0, _ := ret[0].(sdk.ApiReadStackUserAccessRequest)
	return ret0
}

// ReadStackUserAccess indicates an expected call of ReadStackUserAccess.
func (mr *MockDefaultAPIMockRecorder) ReadStackUserAccess(ctx, organizationId, stackId, userId any) *MockDefaultAPIReadStackUserAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStackUserAccess", reflect.TypeOf((*MockDefaultAPI)(nil).ReadStackUserAccess), ctx, organizationId, stackId, userId)
	return &MockDefaultAPIReadStackUserAccessCall{Call: call}
}

// MockDefaultAPIReadStackUserAccessCall wrap *gomock.Call
type MockDefaultAPIReadStackUserAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIReadStackUserAccessCall) Return(arg0 sdk.ApiReadStackUserAccessRequest) *MockDefaultAPIReadStackUserAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIReadStackUserAccessCall) Do(f func(context.Context, string, string, string) sdk.ApiReadStackUserAccessRequest) *MockDefaultAPIReadStackUserAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIReadStackUserAccessCall) DoAndReturn(f func(context.Context, string, string, string) sdk.ApiReadStackUserAccessRequest) *MockDefaultAPIReadStackUserAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadStackUserAccessExecute mocks base method.
func (m *MockDefaultAPI) ReadStackUserAccessExecute(r sdk.ApiReadStackUserAccessRequest) (*sdk.ReadStackUserAccess, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStackUserAccessExecute", r)
	ret0, _ := ret[0].(*sdk.ReadStackUserAccess)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadStackUserAccessExecute indicates an expected call of ReadStackUserAccessExecute.
func (mr *MockDefaultAPIMockRecorder) ReadStackUserAccessExecute(r any) *MockDefaultAPIReadStackUserAccessExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStackUserAccessExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ReadStackUserAccessExecute), r)
	return &MockDefaultAPIReadStackUserAccessExecuteCall{Call: call}
}

// MockDefaultAPIReadStackUserAccessExecuteCall wrap *gomock.Call
type MockDefaultAPIReadStackUserAccessExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIReadStackUserAccessExecuteCall) Return(arg0 *sdk.ReadStackUserAccess, arg1 *http.Response, arg2 error) *MockDefaultAPIReadStackUserAccessExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIReadStackUserAccessExecuteCall) Do(f func(sdk.ApiReadStackUserAccessRequest) (*sdk.ReadStackUserAccess, *http.Response, error)) *MockDefaultAPIReadStackUserAccessExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIReadStackUserAccessExecuteCall) DoAndReturn(f func(sdk.ApiReadStackUserAccessRequest) (*sdk.ReadStackUserAccess, *http.Response, error)) *MockDefaultAPIReadStackUserAccessExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserOfOrganization mocks base method.
func (m *MockDefaultAPI) ReadUserOfOrganization(ctx context.Context, organizationId, userId string) sdk.ApiReadUserOfOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserOfOrganization", ctx, organizationId, userId)
	ret0, _ := ret[0].(sdk.ApiReadUserOfOrganizationRequest)
	return ret0
}

// ReadUserOfOrganization indicates an expected call of ReadUserOfOrganization.
func (mr *MockDefaultAPIMockRecorder) ReadUserOfOrganization(ctx, organizationId, userId any) *MockDefaultAPIReadUserOfOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserOfOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).ReadUserOfOrganization), ctx, organizationId, userId)
	return &MockDefaultAPIReadUserOfOrganizationCall{Call: call}
}

// MockDefaultAPIReadUserOfOrganizationCall wrap *gomock.Call
type MockDefaultAPIReadUserOfOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIReadUserOfOrganizationCall) Return(arg0 sdk.ApiReadUserOfOrganizationRequest) *MockDefaultAPIReadUserOfOrganizationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIReadUserOfOrganizationCall) Do(f func(context.Context, string, string) sdk.ApiReadUserOfOrganizationRequest) *MockDefaultAPIReadUserOfOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIReadUserOfOrganizationCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiReadUserOfOrganizationRequest) *MockDefaultAPIReadUserOfOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserOfOrganizationExecute mocks base method.
func (m *MockDefaultAPI) ReadUserOfOrganizationExecute(r sdk.ApiReadUserOfOrganizationRequest) (*sdk.ReadOrganizationUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserOfOrganizationExecute", r)
	ret0, _ := ret[0].(*sdk.ReadOrganizationUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadUserOfOrganizationExecute indicates an expected call of ReadUserOfOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) ReadUserOfOrganizationExecute(r any) *MockDefaultAPIReadUserOfOrganizationExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserOfOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ReadUserOfOrganizationExecute), r)
	return &MockDefaultAPIReadUserOfOrganizationExecuteCall{Call: call}
}

// MockDefaultAPIReadUserOfOrganizationExecuteCall wrap *gomock.Call
type MockDefaultAPIReadUserOfOrganizationExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIReadUserOfOrganizationExecuteCall) Return(arg0 *sdk.ReadOrganizationUserResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIReadUserOfOrganizationExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIReadUserOfOrganizationExecuteCall) Do(f func(sdk.ApiReadUserOfOrganizationRequest) (*sdk.ReadOrganizationUserResponse, *http.Response, error)) *MockDefaultAPIReadUserOfOrganizationExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIReadUserOfOrganizationExecuteCall) DoAndReturn(f func(sdk.ApiReadUserOfOrganizationRequest) (*sdk.ReadOrganizationUserResponse, *http.Response, error)) *MockDefaultAPIReadUserOfOrganizationExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RestoreStack mocks base method.
func (m *MockDefaultAPI) RestoreStack(ctx context.Context, organizationId, stackId string) sdk.ApiRestoreStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiRestoreStackRequest)
	return ret0
}

// RestoreStack indicates an expected call of RestoreStack.
func (mr *MockDefaultAPIMockRecorder) RestoreStack(ctx, organizationId, stackId any) *MockDefaultAPIRestoreStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreStack", reflect.TypeOf((*MockDefaultAPI)(nil).RestoreStack), ctx, organizationId, stackId)
	return &MockDefaultAPIRestoreStackCall{Call: call}
}

// MockDefaultAPIRestoreStackCall wrap *gomock.Call
type MockDefaultAPIRestoreStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIRestoreStackCall) Return(arg0 sdk.ApiRestoreStackRequest) *MockDefaultAPIRestoreStackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIRestoreStackCall) Do(f func(context.Context, string, string) sdk.ApiRestoreStackRequest) *MockDefaultAPIRestoreStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIRestoreStackCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiRestoreStackRequest) *MockDefaultAPIRestoreStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RestoreStackExecute mocks base method.
func (m *MockDefaultAPI) RestoreStackExecute(r sdk.ApiRestoreStackRequest) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreStackExecute", r)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RestoreStackExecute indicates an expected call of RestoreStackExecute.
func (mr *MockDefaultAPIMockRecorder) RestoreStackExecute(r any) *MockDefaultAPIRestoreStackExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).RestoreStackExecute), r)
	return &MockDefaultAPIRestoreStackExecuteCall{Call: call}
}

// MockDefaultAPIRestoreStackExecuteCall wrap *gomock.Call
type MockDefaultAPIRestoreStackExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIRestoreStackExecuteCall) Return(arg0 *sdk.CreateStackResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIRestoreStackExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIRestoreStackExecuteCall) Do(f func(sdk.ApiRestoreStackRequest) (*sdk.CreateStackResponse, *http.Response, error)) *MockDefaultAPIRestoreStackExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIRestoreStackExecuteCall) DoAndReturn(f func(sdk.ApiRestoreStackRequest) (*sdk.CreateStackResponse, *http.Response, error)) *MockDefaultAPIRestoreStackExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateOrganization mocks base method.
func (m *MockDefaultAPI) UpdateOrganization(ctx context.Context, organizationId string) sdk.ApiUpdateOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiUpdateOrganizationRequest)
	return ret0
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockDefaultAPIMockRecorder) UpdateOrganization(ctx, organizationId any) *MockDefaultAPIUpdateOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).UpdateOrganization), ctx, organizationId)
	return &MockDefaultAPIUpdateOrganizationCall{Call: call}
}

// MockDefaultAPIUpdateOrganizationCall wrap *gomock.Call
type MockDefaultAPIUpdateOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIUpdateOrganizationCall) Return(arg0 sdk.ApiUpdateOrganizationRequest) *MockDefaultAPIUpdateOrganizationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIUpdateOrganizationCall) Do(f func(context.Context, string) sdk.ApiUpdateOrganizationRequest) *MockDefaultAPIUpdateOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIUpdateOrganizationCall) DoAndReturn(f func(context.Context, string) sdk.ApiUpdateOrganizationRequest) *MockDefaultAPIUpdateOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateOrganizationExecute mocks base method.
func (m *MockDefaultAPI) UpdateOrganizationExecute(r sdk.ApiUpdateOrganizationRequest) (*sdk.ReadOrganizationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationExecute", r)
	ret0, _ := ret[0].(*sdk.ReadOrganizationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateOrganizationExecute indicates an expected call of UpdateOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) UpdateOrganizationExecute(r any) *MockDefaultAPIUpdateOrganizationExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).UpdateOrganizationExecute), r)
	return &MockDefaultAPIUpdateOrganizationExecuteCall{Call: call}
}

// MockDefaultAPIUpdateOrganizationExecuteCall wrap *gomock.Call
type MockDefaultAPIUpdateOrganizationExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIUpdateOrganizationExecuteCall) Return(arg0 *sdk.ReadOrganizationResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIUpdateOrganizationExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIUpdateOrganizationExecuteCall) Do(f func(sdk.ApiUpdateOrganizationRequest) (*sdk.ReadOrganizationResponse, *http.Response, error)) *MockDefaultAPIUpdateOrganizationExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIUpdateOrganizationExecuteCall) DoAndReturn(f func(sdk.ApiUpdateOrganizationRequest) (*sdk.ReadOrganizationResponse, *http.Response, error)) *MockDefaultAPIUpdateOrganizationExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStack mocks base method.
func (m *MockDefaultAPI) UpdateStack(ctx context.Context, organizationId, stackId string) sdk.ApiUpdateStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiUpdateStackRequest)
	return ret0
}

// UpdateStack indicates an expected call of UpdateStack.
func (mr *MockDefaultAPIMockRecorder) UpdateStack(ctx, organizationId, stackId any) *MockDefaultAPIUpdateStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStack", reflect.TypeOf((*MockDefaultAPI)(nil).UpdateStack), ctx, organizationId, stackId)
	return &MockDefaultAPIUpdateStackCall{Call: call}
}

// MockDefaultAPIUpdateStackCall wrap *gomock.Call
type MockDefaultAPIUpdateStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIUpdateStackCall) Return(arg0 sdk.ApiUpdateStackRequest) *MockDefaultAPIUpdateStackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIUpdateStackCall) Do(f func(context.Context, string, string) sdk.ApiUpdateStackRequest) *MockDefaultAPIUpdateStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIUpdateStackCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiUpdateStackRequest) *MockDefaultAPIUpdateStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStackExecute mocks base method.
func (m *MockDefaultAPI) UpdateStackExecute(r sdk.ApiUpdateStackRequest) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStackExecute", r)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateStackExecute indicates an expected call of UpdateStackExecute.
func (mr *MockDefaultAPIMockRecorder) UpdateStackExecute(r any) *MockDefaultAPIUpdateStackExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).UpdateStackExecute), r)
	return &MockDefaultAPIUpdateStackExecuteCall{Call: call}
}

// MockDefaultAPIUpdateStackExecuteCall wrap *gomock.Call
type MockDefaultAPIUpdateStackExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIUpdateStackExecuteCall) Return(arg0 *sdk.CreateStackResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIUpdateStackExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIUpdateStackExecuteCall) Do(f func(sdk.ApiUpdateStackRequest) (*sdk.CreateStackResponse, *http.Response, error)) *MockDefaultAPIUpdateStackExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIUpdateStackExecuteCall) DoAndReturn(f func(sdk.ApiUpdateStackRequest) (*sdk.CreateStackResponse, *http.Response, error)) *MockDefaultAPIUpdateStackExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeStack mocks base method.
func (m *MockDefaultAPI) UpgradeStack(ctx context.Context, organizationId, stackId string) sdk.ApiUpgradeStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiUpgradeStackRequest)
	return ret0
}

// UpgradeStack indicates an expected call of UpgradeStack.
func (mr *MockDefaultAPIMockRecorder) UpgradeStack(ctx, organizationId, stackId any) *MockDefaultAPIUpgradeStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeStack", reflect.TypeOf((*MockDefaultAPI)(nil).UpgradeStack), ctx, organizationId, stackId)
	return &MockDefaultAPIUpgradeStackCall{Call: call}
}

// MockDefaultAPIUpgradeStackCall wrap *gomock.Call
type MockDefaultAPIUpgradeStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIUpgradeStackCall) Return(arg0 sdk.ApiUpgradeStackRequest) *MockDefaultAPIUpgradeStackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIUpgradeStackCall) Do(f func(context.Context, string, string) sdk.ApiUpgradeStackRequest) *MockDefaultAPIUpgradeStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIUpgradeStackCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiUpgradeStackRequest) *MockDefaultAPIUpgradeStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeStackExecute mocks base method.
func (m *MockDefaultAPI) UpgradeStackExecute(r sdk.ApiUpgradeStackRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeStackExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeStackExecute indicates an expected call of UpgradeStackExecute.
func (mr *MockDefaultAPIMockRecorder) UpgradeStackExecute(r any) *MockDefaultAPIUpgradeStackExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).UpgradeStackExecute), r)
	return &MockDefaultAPIUpgradeStackExecuteCall{Call: call}
}

// MockDefaultAPIUpgradeStackExecuteCall wrap *gomock.Call
type MockDefaultAPIUpgradeStackExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIUpgradeStackExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIUpgradeStackExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIUpgradeStackExecuteCall) Do(f func(sdk.ApiUpgradeStackRequest) (*http.Response, error)) *MockDefaultAPIUpgradeStackExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIUpgradeStackExecuteCall) DoAndReturn(f func(sdk.ApiUpgradeStackRequest) (*http.Response, error)) *MockDefaultAPIUpgradeStackExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertAuthenticationProvider mocks base method.
func (m *MockDefaultAPI) UpsertAuthenticationProvider(ctx context.Context, organizationId string) sdk.ApiUpsertAuthenticationProviderRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAuthenticationProvider", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiUpsertAuthenticationProviderRequest)
	return ret0
}

// UpsertAuthenticationProvider indicates an expected call of UpsertAuthenticationProvider.
func (mr *MockDefaultAPIMockRecorder) UpsertAuthenticationProvider(ctx, organizationId any) *MockDefaultAPIUpsertAuthenticationProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAuthenticationProvider", reflect.TypeOf((*MockDefaultAPI)(nil).UpsertAuthenticationProvider), ctx, organizationId)
	return &MockDefaultAPIUpsertAuthenticationProviderCall{Call: call}
}

// MockDefaultAPIUpsertAuthenticationProviderCall wrap *gomock.Call
type MockDefaultAPIUpsertAuthenticationProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIUpsertAuthenticationProviderCall) Return(arg0 sdk.ApiUpsertAuthenticationProviderRequest) *MockDefaultAPIUpsertAuthenticationProviderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIUpsertAuthenticationProviderCall) Do(f func(context.Context, string) sdk.ApiUpsertAuthenticationProviderRequest) *MockDefaultAPIUpsertAuthenticationProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIUpsertAuthenticationProviderCall) DoAndReturn(f func(context.Context, string) sdk.ApiUpsertAuthenticationProviderRequest) *MockDefaultAPIUpsertAuthenticationProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertAuthenticationProviderExecute mocks base method.
func (m *MockDefaultAPI) UpsertAuthenticationProviderExecute(r sdk.ApiUpsertAuthenticationProviderRequest) (*sdk.AuthenticationProviderResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAuthenticationProviderExecute", r)
	ret0, _ := ret[0].(*sdk.AuthenticationProviderResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertAuthenticationProviderExecute indicates an expected call of UpsertAuthenticationProviderExecute.
func (mr *MockDefaultAPIMockRecorder) UpsertAuthenticationProviderExecute(r any) *MockDefaultAPIUpsertAuthenticationProviderExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAuthenticationProviderExecute", reflect.TypeOf((*MockDefaultAPI)(nil).UpsertAuthenticationProviderExecute), r)
	return &MockDefaultAPIUpsertAuthenticationProviderExecuteCall{Call: call}
}

// MockDefaultAPIUpsertAuthenticationProviderExecuteCall wrap *gomock.Call
type MockDefaultAPIUpsertAuthenticationProviderExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIUpsertAuthenticationProviderExecuteCall) Return(arg0 *sdk.AuthenticationProviderResponse, arg1 *http.Response, arg2 error) *MockDefaultAPIUpsertAuthenticationProviderExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIUpsertAuthenticationProviderExecuteCall) Do(f func(sdk.ApiUpsertAuthenticationProviderRequest) (*sdk.AuthenticationProviderResponse, *http.Response, error)) *MockDefaultAPIUpsertAuthenticationProviderExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIUpsertAuthenticationProviderExecuteCall) DoAndReturn(f func(sdk.ApiUpsertAuthenticationProviderRequest) (*sdk.AuthenticationProviderResponse, *http.Response, error)) *MockDefaultAPIUpsertAuthenticationProviderExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertOrganizationUser mocks base method.
func (m *MockDefaultAPI) UpsertOrganizationUser(ctx context.Context, organizationId, userId string) sdk.ApiUpsertOrganizationUserRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOrganizationUser", ctx, organizationId, userId)
	ret0, _ := ret[0].(sdk.ApiUpsertOrganizationUserRequest)
	return ret0
}

// UpsertOrganizationUser indicates an expected call of UpsertOrganizationUser.
func (mr *MockDefaultAPIMockRecorder) UpsertOrganizationUser(ctx, organizationId, userId any) *MockDefaultAPIUpsertOrganizationUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOrganizationUser", reflect.TypeOf((*MockDefaultAPI)(nil).UpsertOrganizationUser), ctx, organizationId, userId)
	return &MockDefaultAPIUpsertOrganizationUserCall{Call: call}
}

// MockDefaultAPIUpsertOrganizationUserCall wrap *gomock.Call
type MockDefaultAPIUpsertOrganizationUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIUpsertOrganizationUserCall) Return(arg0 sdk.ApiUpsertOrganizationUserRequest) *MockDefaultAPIUpsertOrganizationUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIUpsertOrganizationUserCall) Do(f func(context.Context, string, string) sdk.ApiUpsertOrganizationUserRequest) *MockDefaultAPIUpsertOrganizationUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIUpsertOrganizationUserCall) DoAndReturn(f func(context.Context, string, string) sdk.ApiUpsertOrganizationUserRequest) *MockDefaultAPIUpsertOrganizationUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertOrganizationUserExecute mocks base method.
func (m *MockDefaultAPI) UpsertOrganizationUserExecute(r sdk.ApiUpsertOrganizationUserRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOrganizationUserExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertOrganizationUserExecute indicates an expected call of UpsertOrganizationUserExecute.
func (mr *MockDefaultAPIMockRecorder) UpsertOrganizationUserExecute(r any) *MockDefaultAPIUpsertOrganizationUserExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOrganizationUserExecute", reflect.TypeOf((*MockDefaultAPI)(nil).UpsertOrganizationUserExecute), r)
	return &MockDefaultAPIUpsertOrganizationUserExecuteCall{Call: call}
}

// MockDefaultAPIUpsertOrganizationUserExecuteCall wrap *gomock.Call
type MockDefaultAPIUpsertOrganizationUserExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIUpsertOrganizationUserExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIUpsertOrganizationUserExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIUpsertOrganizationUserExecuteCall) Do(f func(sdk.ApiUpsertOrganizationUserRequest) (*http.Response, error)) *MockDefaultAPIUpsertOrganizationUserExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIUpsertOrganizationUserExecuteCall) DoAndReturn(f func(sdk.ApiUpsertOrganizationUserRequest) (*http.Response, error)) *MockDefaultAPIUpsertOrganizationUserExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertStackUserAccess mocks base method.
func (m *MockDefaultAPI) UpsertStackUserAccess(ctx context.Context, organizationId, stackId, userId string) sdk.ApiUpsertStackUserAccessRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertStackUserAccess", ctx, organizationId, stackId, userId)
	ret0, _ := ret[0].(sdk.ApiUpsertStackUserAccessRequest)
	return ret0
}

// UpsertStackUserAccess indicates an expected call of UpsertStackUserAccess.
func (mr *MockDefaultAPIMockRecorder) UpsertStackUserAccess(ctx, organizationId, stackId, userId any) *MockDefaultAPIUpsertStackUserAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStackUserAccess", reflect.TypeOf((*MockDefaultAPI)(nil).UpsertStackUserAccess), ctx, organizationId, stackId, userId)
	return &MockDefaultAPIUpsertStackUserAccessCall{Call: call}
}

// MockDefaultAPIUpsertStackUserAccessCall wrap *gomock.Call
type MockDefaultAPIUpsertStackUserAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIUpsertStackUserAccessCall) Return(arg0 sdk.ApiUpsertStackUserAccessRequest) *MockDefaultAPIUpsertStackUserAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIUpsertStackUserAccessCall) Do(f func(context.Context, string, string, string) sdk.ApiUpsertStackUserAccessRequest) *MockDefaultAPIUpsertStackUserAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIUpsertStackUserAccessCall) DoAndReturn(f func(context.Context, string, string, string) sdk.ApiUpsertStackUserAccessRequest) *MockDefaultAPIUpsertStackUserAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertStackUserAccessExecute mocks base method.
func (m *MockDefaultAPI) UpsertStackUserAccessExecute(r sdk.ApiUpsertStackUserAccessRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertStackUserAccessExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertStackUserAccessExecute indicates an expected call of UpsertStackUserAccessExecute.
func (mr *MockDefaultAPIMockRecorder) UpsertStackUserAccessExecute(r any) *MockDefaultAPIUpsertStackUserAccessExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStackUserAccessExecute", reflect.TypeOf((*MockDefaultAPI)(nil).UpsertStackUserAccessExecute), r)
	return &MockDefaultAPIUpsertStackUserAccessExecuteCall{Call: call}
}

// MockDefaultAPIUpsertStackUserAccessExecuteCall wrap *gomock.Call
type MockDefaultAPIUpsertStackUserAccessExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDefaultAPIUpsertStackUserAccessExecuteCall) Return(arg0 *http.Response, arg1 error) *MockDefaultAPIUpsertStackUserAccessExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDefaultAPIUpsertStackUserAccessExecuteCall) Do(f func(sdk.ApiUpsertStackUserAccessRequest) (*http.Response, error)) *MockDefaultAPIUpsertStackUserAccessExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDefaultAPIUpsertStackUserAccessExecuteCall) DoAndReturn(f func(sdk.ApiUpsertStackUserAccessRequest) (*http.Response, error)) *MockDefaultAPIUpsertStackUserAccessExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
