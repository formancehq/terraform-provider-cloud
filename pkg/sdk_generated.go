// Code generated by MockGen. DO NOT EDIT.
// Source: ../sdk/api_default.go
//
// Generated by this command:
//
//	mockgen -source=../sdk/api_default.go -destination=sdk_generated.go -package=pkg . DefaultAPI
//

// Package pkg is a generated GoMock package.
package pkg

import (
	context "context"
	http "net/http"
	reflect "reflect"

	sdk "github.com/formancehq/terraform-provider-cloud/sdk"
	gomock "go.uber.org/mock/gomock"
)

// MockDefaultAPI is a mock of DefaultAPI interface.
type MockDefaultAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultAPIMockRecorder
	isgomock struct{}
}

// MockDefaultAPIMockRecorder is the mock recorder for MockDefaultAPI.
type MockDefaultAPIMockRecorder struct {
	mock *MockDefaultAPI
}

// NewMockDefaultAPI creates a new mock instance.
func NewMockDefaultAPI(ctrl *gomock.Controller) *MockDefaultAPI {
	mock := &MockDefaultAPI{ctrl: ctrl}
	mock.recorder = &MockDefaultAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultAPI) EXPECT() *MockDefaultAPIMockRecorder {
	return m.recorder
}

// AcceptInvitation mocks base method.
func (m *MockDefaultAPI) AcceptInvitation(ctx context.Context, invitationId string) sdk.ApiAcceptInvitationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitation", ctx, invitationId)
	ret0, _ := ret[0].(sdk.ApiAcceptInvitationRequest)
	return ret0
}

// AcceptInvitation indicates an expected call of AcceptInvitation.
func (mr *MockDefaultAPIMockRecorder) AcceptInvitation(ctx, invitationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitation", reflect.TypeOf((*MockDefaultAPI)(nil).AcceptInvitation), ctx, invitationId)
}

// AcceptInvitationExecute mocks base method.
func (m *MockDefaultAPI) AcceptInvitationExecute(r sdk.ApiAcceptInvitationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitationExecute indicates an expected call of AcceptInvitationExecute.
func (mr *MockDefaultAPIMockRecorder) AcceptInvitationExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).AcceptInvitationExecute), r)
}

// AddFeatures mocks base method.
func (m *MockDefaultAPI) AddFeatures(ctx context.Context, organizationId string) sdk.ApiAddFeaturesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFeatures", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiAddFeaturesRequest)
	return ret0
}

// AddFeatures indicates an expected call of AddFeatures.
func (mr *MockDefaultAPIMockRecorder) AddFeatures(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeatures", reflect.TypeOf((*MockDefaultAPI)(nil).AddFeatures), ctx, organizationId)
}

// AddFeaturesExecute mocks base method.
func (m *MockDefaultAPI) AddFeaturesExecute(r sdk.ApiAddFeaturesRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFeaturesExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFeaturesExecute indicates an expected call of AddFeaturesExecute.
func (mr *MockDefaultAPIMockRecorder) AddFeaturesExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeaturesExecute", reflect.TypeOf((*MockDefaultAPI)(nil).AddFeaturesExecute), r)
}

// CreateInvitation mocks base method.
func (m *MockDefaultAPI) CreateInvitation(ctx context.Context, organizationId string) sdk.ApiCreateInvitationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitation", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiCreateInvitationRequest)
	return ret0
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockDefaultAPIMockRecorder) CreateInvitation(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockDefaultAPI)(nil).CreateInvitation), ctx, organizationId)
}

// CreateInvitationExecute mocks base method.
func (m *MockDefaultAPI) CreateInvitationExecute(r sdk.ApiCreateInvitationRequest) (*sdk.CreateInvitationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitationExecute", r)
	ret0, _ := ret[0].(*sdk.CreateInvitationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateInvitationExecute indicates an expected call of CreateInvitationExecute.
func (mr *MockDefaultAPIMockRecorder) CreateInvitationExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).CreateInvitationExecute), r)
}

// CreateOrganization mocks base method.
func (m *MockDefaultAPI) CreateOrganization(ctx context.Context) sdk.ApiCreateOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx)
	ret0, _ := ret[0].(sdk.ApiCreateOrganizationRequest)
	return ret0
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockDefaultAPIMockRecorder) CreateOrganization(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).CreateOrganization), ctx)
}

// CreateOrganizationExecute mocks base method.
func (m *MockDefaultAPI) CreateOrganizationExecute(r sdk.ApiCreateOrganizationRequest) (*sdk.CreateOrganizationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationExecute", r)
	ret0, _ := ret[0].(*sdk.CreateOrganizationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrganizationExecute indicates an expected call of CreateOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) CreateOrganizationExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).CreateOrganizationExecute), r)
}

// CreatePrivateRegion mocks base method.
func (m *MockDefaultAPI) CreatePrivateRegion(ctx context.Context, organizationId string) sdk.ApiCreatePrivateRegionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateRegion", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiCreatePrivateRegionRequest)
	return ret0
}

// CreatePrivateRegion indicates an expected call of CreatePrivateRegion.
func (mr *MockDefaultAPIMockRecorder) CreatePrivateRegion(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateRegion", reflect.TypeOf((*MockDefaultAPI)(nil).CreatePrivateRegion), ctx, organizationId)
}

// CreatePrivateRegionExecute mocks base method.
func (m *MockDefaultAPI) CreatePrivateRegionExecute(r sdk.ApiCreatePrivateRegionRequest) (*sdk.CreatedPrivateRegionResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateRegionExecute", r)
	ret0, _ := ret[0].(*sdk.CreatedPrivateRegionResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePrivateRegionExecute indicates an expected call of CreatePrivateRegionExecute.
func (mr *MockDefaultAPIMockRecorder) CreatePrivateRegionExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateRegionExecute", reflect.TypeOf((*MockDefaultAPI)(nil).CreatePrivateRegionExecute), r)
}

// CreateStack mocks base method.
func (m *MockDefaultAPI) CreateStack(ctx context.Context, organizationId string) sdk.ApiCreateStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStack", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiCreateStackRequest)
	return ret0
}

// CreateStack indicates an expected call of CreateStack.
func (mr *MockDefaultAPIMockRecorder) CreateStack(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStack", reflect.TypeOf((*MockDefaultAPI)(nil).CreateStack), ctx, organizationId)
}

// CreateStackExecute mocks base method.
func (m *MockDefaultAPI) CreateStackExecute(r sdk.ApiCreateStackRequest) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStackExecute", r)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateStackExecute indicates an expected call of CreateStackExecute.
func (mr *MockDefaultAPIMockRecorder) CreateStackExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).CreateStackExecute), r)
}

// DeclineInvitation mocks base method.
func (m *MockDefaultAPI) DeclineInvitation(ctx context.Context, invitationId string) sdk.ApiDeclineInvitationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineInvitation", ctx, invitationId)
	ret0, _ := ret[0].(sdk.ApiDeclineInvitationRequest)
	return ret0
}

// DeclineInvitation indicates an expected call of DeclineInvitation.
func (mr *MockDefaultAPIMockRecorder) DeclineInvitation(ctx, invitationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineInvitation", reflect.TypeOf((*MockDefaultAPI)(nil).DeclineInvitation), ctx, invitationId)
}

// DeclineInvitationExecute mocks base method.
func (m *MockDefaultAPI) DeclineInvitationExecute(r sdk.ApiDeclineInvitationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineInvitationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclineInvitationExecute indicates an expected call of DeclineInvitationExecute.
func (mr *MockDefaultAPIMockRecorder) DeclineInvitationExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineInvitationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeclineInvitationExecute), r)
}

// DeleteFeature mocks base method.
func (m *MockDefaultAPI) DeleteFeature(ctx context.Context, organizationId, name string) sdk.ApiDeleteFeatureRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeature", ctx, organizationId, name)
	ret0, _ := ret[0].(sdk.ApiDeleteFeatureRequest)
	return ret0
}

// DeleteFeature indicates an expected call of DeleteFeature.
func (mr *MockDefaultAPIMockRecorder) DeleteFeature(ctx, organizationId, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeature", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteFeature), ctx, organizationId, name)
}

// DeleteFeatureExecute mocks base method.
func (m *MockDefaultAPI) DeleteFeatureExecute(r sdk.ApiDeleteFeatureRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeatureExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeatureExecute indicates an expected call of DeleteFeatureExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteFeatureExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeatureExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteFeatureExecute), r)
}

// DeleteInvitation mocks base method.
func (m *MockDefaultAPI) DeleteInvitation(ctx context.Context, organizationId, invitationId string) sdk.ApiDeleteInvitationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitation", ctx, organizationId, invitationId)
	ret0, _ := ret[0].(sdk.ApiDeleteInvitationRequest)
	return ret0
}

// DeleteInvitation indicates an expected call of DeleteInvitation.
func (mr *MockDefaultAPIMockRecorder) DeleteInvitation(ctx, organizationId, invitationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitation", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteInvitation), ctx, organizationId, invitationId)
}

// DeleteInvitationExecute mocks base method.
func (m *MockDefaultAPI) DeleteInvitationExecute(r sdk.ApiDeleteInvitationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitationExecute indicates an expected call of DeleteInvitationExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteInvitationExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteInvitationExecute), r)
}

// DeleteOrganization mocks base method.
func (m *MockDefaultAPI) DeleteOrganization(ctx context.Context, organizationId string) sdk.ApiDeleteOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiDeleteOrganizationRequest)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockDefaultAPIMockRecorder) DeleteOrganization(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteOrganization), ctx, organizationId)
}

// DeleteOrganizationExecute mocks base method.
func (m *MockDefaultAPI) DeleteOrganizationExecute(r sdk.ApiDeleteOrganizationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationExecute indicates an expected call of DeleteOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteOrganizationExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteOrganizationExecute), r)
}

// DeleteRegion mocks base method.
func (m *MockDefaultAPI) DeleteRegion(ctx context.Context, organizationId, regionID string) sdk.ApiDeleteRegionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegion", ctx, organizationId, regionID)
	ret0, _ := ret[0].(sdk.ApiDeleteRegionRequest)
	return ret0
}

// DeleteRegion indicates an expected call of DeleteRegion.
func (mr *MockDefaultAPIMockRecorder) DeleteRegion(ctx, organizationId, regionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegion", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteRegion), ctx, organizationId, regionID)
}

// DeleteRegionExecute mocks base method.
func (m *MockDefaultAPI) DeleteRegionExecute(r sdk.ApiDeleteRegionRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegionExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegionExecute indicates an expected call of DeleteRegionExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteRegionExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegionExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteRegionExecute), r)
}

// DeleteStack mocks base method.
func (m *MockDefaultAPI) DeleteStack(ctx context.Context, organizationId, stackId string) sdk.ApiDeleteStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiDeleteStackRequest)
	return ret0
}

// DeleteStack indicates an expected call of DeleteStack.
func (mr *MockDefaultAPIMockRecorder) DeleteStack(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStack", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteStack), ctx, organizationId, stackId)
}

// DeleteStackExecute mocks base method.
func (m *MockDefaultAPI) DeleteStackExecute(r sdk.ApiDeleteStackRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStackExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStackExecute indicates an expected call of DeleteStackExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteStackExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteStackExecute), r)
}

// DeleteStackUserAccess mocks base method.
func (m *MockDefaultAPI) DeleteStackUserAccess(ctx context.Context, organizationId, stackId, userId string) sdk.ApiDeleteStackUserAccessRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStackUserAccess", ctx, organizationId, stackId, userId)
	ret0, _ := ret[0].(sdk.ApiDeleteStackUserAccessRequest)
	return ret0
}

// DeleteStackUserAccess indicates an expected call of DeleteStackUserAccess.
func (mr *MockDefaultAPIMockRecorder) DeleteStackUserAccess(ctx, organizationId, stackId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackUserAccess", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteStackUserAccess), ctx, organizationId, stackId, userId)
}

// DeleteStackUserAccessExecute mocks base method.
func (m *MockDefaultAPI) DeleteStackUserAccessExecute(r sdk.ApiDeleteStackUserAccessRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStackUserAccessExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStackUserAccessExecute indicates an expected call of DeleteStackUserAccessExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteStackUserAccessExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackUserAccessExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteStackUserAccessExecute), r)
}

// DeleteUserFromOrganization mocks base method.
func (m *MockDefaultAPI) DeleteUserFromOrganization(ctx context.Context, organizationId, userId string) sdk.ApiDeleteUserFromOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromOrganization", ctx, organizationId, userId)
	ret0, _ := ret[0].(sdk.ApiDeleteUserFromOrganizationRequest)
	return ret0
}

// DeleteUserFromOrganization indicates an expected call of DeleteUserFromOrganization.
func (mr *MockDefaultAPIMockRecorder) DeleteUserFromOrganization(ctx, organizationId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteUserFromOrganization), ctx, organizationId, userId)
}

// DeleteUserFromOrganizationExecute mocks base method.
func (m *MockDefaultAPI) DeleteUserFromOrganizationExecute(r sdk.ApiDeleteUserFromOrganizationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromOrganizationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserFromOrganizationExecute indicates an expected call of DeleteUserFromOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) DeleteUserFromOrganizationExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DeleteUserFromOrganizationExecute), r)
}

// DisableModule mocks base method.
func (m *MockDefaultAPI) DisableModule(ctx context.Context, organizationId, stackId string) sdk.ApiDisableModuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableModule", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiDisableModuleRequest)
	return ret0
}

// DisableModule indicates an expected call of DisableModule.
func (mr *MockDefaultAPIMockRecorder) DisableModule(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableModule", reflect.TypeOf((*MockDefaultAPI)(nil).DisableModule), ctx, organizationId, stackId)
}

// DisableModuleExecute mocks base method.
func (m *MockDefaultAPI) DisableModuleExecute(r sdk.ApiDisableModuleRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableModuleExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableModuleExecute indicates an expected call of DisableModuleExecute.
func (mr *MockDefaultAPIMockRecorder) DisableModuleExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableModuleExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DisableModuleExecute), r)
}

// DisableStack mocks base method.
func (m *MockDefaultAPI) DisableStack(ctx context.Context, organizationId, stackId string) sdk.ApiDisableStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiDisableStackRequest)
	return ret0
}

// DisableStack indicates an expected call of DisableStack.
func (mr *MockDefaultAPIMockRecorder) DisableStack(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableStack", reflect.TypeOf((*MockDefaultAPI)(nil).DisableStack), ctx, organizationId, stackId)
}

// DisableStackExecute mocks base method.
func (m *MockDefaultAPI) DisableStackExecute(r sdk.ApiDisableStackRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableStackExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableStackExecute indicates an expected call of DisableStackExecute.
func (mr *MockDefaultAPIMockRecorder) DisableStackExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DisableStackExecute), r)
}

// DisableStargate mocks base method.
func (m *MockDefaultAPI) DisableStargate(ctx context.Context, organizationId, stackId string) sdk.ApiDisableStargateRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableStargate", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiDisableStargateRequest)
	return ret0
}

// DisableStargate indicates an expected call of DisableStargate.
func (mr *MockDefaultAPIMockRecorder) DisableStargate(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableStargate", reflect.TypeOf((*MockDefaultAPI)(nil).DisableStargate), ctx, organizationId, stackId)
}

// DisableStargateExecute mocks base method.
func (m *MockDefaultAPI) DisableStargateExecute(r sdk.ApiDisableStargateRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableStargateExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableStargateExecute indicates an expected call of DisableStargateExecute.
func (mr *MockDefaultAPIMockRecorder) DisableStargateExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableStargateExecute", reflect.TypeOf((*MockDefaultAPI)(nil).DisableStargateExecute), r)
}

// EnableModule mocks base method.
func (m *MockDefaultAPI) EnableModule(ctx context.Context, organizationId, stackId string) sdk.ApiEnableModuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableModule", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiEnableModuleRequest)
	return ret0
}

// EnableModule indicates an expected call of EnableModule.
func (mr *MockDefaultAPIMockRecorder) EnableModule(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableModule", reflect.TypeOf((*MockDefaultAPI)(nil).EnableModule), ctx, organizationId, stackId)
}

// EnableModuleExecute mocks base method.
func (m *MockDefaultAPI) EnableModuleExecute(r sdk.ApiEnableModuleRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableModuleExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableModuleExecute indicates an expected call of EnableModuleExecute.
func (mr *MockDefaultAPIMockRecorder) EnableModuleExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableModuleExecute", reflect.TypeOf((*MockDefaultAPI)(nil).EnableModuleExecute), r)
}

// EnableStack mocks base method.
func (m *MockDefaultAPI) EnableStack(ctx context.Context, organizationId, stackId string) sdk.ApiEnableStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiEnableStackRequest)
	return ret0
}

// EnableStack indicates an expected call of EnableStack.
func (mr *MockDefaultAPIMockRecorder) EnableStack(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableStack", reflect.TypeOf((*MockDefaultAPI)(nil).EnableStack), ctx, organizationId, stackId)
}

// EnableStackExecute mocks base method.
func (m *MockDefaultAPI) EnableStackExecute(r sdk.ApiEnableStackRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableStackExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableStackExecute indicates an expected call of EnableStackExecute.
func (mr *MockDefaultAPIMockRecorder) EnableStackExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).EnableStackExecute), r)
}

// EnableStargate mocks base method.
func (m *MockDefaultAPI) EnableStargate(ctx context.Context, organizationId, stackId string) sdk.ApiEnableStargateRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableStargate", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiEnableStargateRequest)
	return ret0
}

// EnableStargate indicates an expected call of EnableStargate.
func (mr *MockDefaultAPIMockRecorder) EnableStargate(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableStargate", reflect.TypeOf((*MockDefaultAPI)(nil).EnableStargate), ctx, organizationId, stackId)
}

// EnableStargateExecute mocks base method.
func (m *MockDefaultAPI) EnableStargateExecute(r sdk.ApiEnableStargateRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableStargateExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableStargateExecute indicates an expected call of EnableStargateExecute.
func (mr *MockDefaultAPIMockRecorder) EnableStargateExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableStargateExecute", reflect.TypeOf((*MockDefaultAPI)(nil).EnableStargateExecute), r)
}

// GetRegion mocks base method.
func (m *MockDefaultAPI) GetRegion(ctx context.Context, organizationId, regionID string) sdk.ApiGetRegionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", ctx, organizationId, regionID)
	ret0, _ := ret[0].(sdk.ApiGetRegionRequest)
	return ret0
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockDefaultAPIMockRecorder) GetRegion(ctx, organizationId, regionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockDefaultAPI)(nil).GetRegion), ctx, organizationId, regionID)
}

// GetRegionExecute mocks base method.
func (m *MockDefaultAPI) GetRegionExecute(r sdk.ApiGetRegionRequest) (*sdk.GetRegionResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionExecute", r)
	ret0, _ := ret[0].(*sdk.GetRegionResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegionExecute indicates an expected call of GetRegionExecute.
func (mr *MockDefaultAPIMockRecorder) GetRegionExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionExecute", reflect.TypeOf((*MockDefaultAPI)(nil).GetRegionExecute), r)
}

// GetRegionVersions mocks base method.
func (m *MockDefaultAPI) GetRegionVersions(ctx context.Context, organizationId, regionID string) sdk.ApiGetRegionVersionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionVersions", ctx, organizationId, regionID)
	ret0, _ := ret[0].(sdk.ApiGetRegionVersionsRequest)
	return ret0
}

// GetRegionVersions indicates an expected call of GetRegionVersions.
func (mr *MockDefaultAPIMockRecorder) GetRegionVersions(ctx, organizationId, regionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionVersions", reflect.TypeOf((*MockDefaultAPI)(nil).GetRegionVersions), ctx, organizationId, regionID)
}

// GetRegionVersionsExecute mocks base method.
func (m *MockDefaultAPI) GetRegionVersionsExecute(r sdk.ApiGetRegionVersionsRequest) (*sdk.GetRegionVersionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionVersionsExecute", r)
	ret0, _ := ret[0].(*sdk.GetRegionVersionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegionVersionsExecute indicates an expected call of GetRegionVersionsExecute.
func (mr *MockDefaultAPIMockRecorder) GetRegionVersionsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionVersionsExecute", reflect.TypeOf((*MockDefaultAPI)(nil).GetRegionVersionsExecute), r)
}

// GetServerInfo mocks base method.
func (m *MockDefaultAPI) GetServerInfo(ctx context.Context) sdk.ApiGetServerInfoRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerInfo", ctx)
	ret0, _ := ret[0].(sdk.ApiGetServerInfoRequest)
	return ret0
}

// GetServerInfo indicates an expected call of GetServerInfo.
func (mr *MockDefaultAPIMockRecorder) GetServerInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerInfo", reflect.TypeOf((*MockDefaultAPI)(nil).GetServerInfo), ctx)
}

// GetServerInfoExecute mocks base method.
func (m *MockDefaultAPI) GetServerInfoExecute(r sdk.ApiGetServerInfoRequest) (*sdk.ServerInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerInfoExecute", r)
	ret0, _ := ret[0].(*sdk.ServerInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServerInfoExecute indicates an expected call of GetServerInfoExecute.
func (mr *MockDefaultAPIMockRecorder) GetServerInfoExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerInfoExecute", reflect.TypeOf((*MockDefaultAPI)(nil).GetServerInfoExecute), r)
}

// GetStack mocks base method.
func (m *MockDefaultAPI) GetStack(ctx context.Context, organizationId, stackId string) sdk.ApiGetStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiGetStackRequest)
	return ret0
}

// GetStack indicates an expected call of GetStack.
func (mr *MockDefaultAPIMockRecorder) GetStack(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStack", reflect.TypeOf((*MockDefaultAPI)(nil).GetStack), ctx, organizationId, stackId)
}

// GetStackExecute mocks base method.
func (m *MockDefaultAPI) GetStackExecute(r sdk.ApiGetStackRequest) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStackExecute", r)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStackExecute indicates an expected call of GetStackExecute.
func (mr *MockDefaultAPIMockRecorder) GetStackExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).GetStackExecute), r)
}

// ListFeatures mocks base method.
func (m *MockDefaultAPI) ListFeatures(ctx context.Context, organizationId string) sdk.ApiListFeaturesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatures", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiListFeaturesRequest)
	return ret0
}

// ListFeatures indicates an expected call of ListFeatures.
func (mr *MockDefaultAPIMockRecorder) ListFeatures(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatures", reflect.TypeOf((*MockDefaultAPI)(nil).ListFeatures), ctx, organizationId)
}

// ListFeaturesExecute mocks base method.
func (m *MockDefaultAPI) ListFeaturesExecute(r sdk.ApiListFeaturesRequest) (*sdk.ListFeatures200Response, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeaturesExecute", r)
	ret0, _ := ret[0].(*sdk.ListFeatures200Response)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFeaturesExecute indicates an expected call of ListFeaturesExecute.
func (mr *MockDefaultAPIMockRecorder) ListFeaturesExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeaturesExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListFeaturesExecute), r)
}

// ListInvitations mocks base method.
func (m *MockDefaultAPI) ListInvitations(ctx context.Context) sdk.ApiListInvitationsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", ctx)
	ret0, _ := ret[0].(sdk.ApiListInvitationsRequest)
	return ret0
}

// ListInvitations indicates an expected call of ListInvitations.
func (mr *MockDefaultAPIMockRecorder) ListInvitations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockDefaultAPI)(nil).ListInvitations), ctx)
}

// ListInvitationsExecute mocks base method.
func (m *MockDefaultAPI) ListInvitationsExecute(r sdk.ApiListInvitationsRequest) (*sdk.ListInvitationsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitationsExecute", r)
	ret0, _ := ret[0].(*sdk.ListInvitationsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInvitationsExecute indicates an expected call of ListInvitationsExecute.
func (mr *MockDefaultAPIMockRecorder) ListInvitationsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListInvitationsExecute), r)
}

// ListLogs mocks base method.
func (m *MockDefaultAPI) ListLogs(ctx context.Context, organizationId string) sdk.ApiListLogsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogs", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiListLogsRequest)
	return ret0
}

// ListLogs indicates an expected call of ListLogs.
func (mr *MockDefaultAPIMockRecorder) ListLogs(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogs", reflect.TypeOf((*MockDefaultAPI)(nil).ListLogs), ctx, organizationId)
}

// ListLogsExecute mocks base method.
func (m *MockDefaultAPI) ListLogsExecute(r sdk.ApiListLogsRequest) (*sdk.LogCursor, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogsExecute", r)
	ret0, _ := ret[0].(*sdk.LogCursor)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLogsExecute indicates an expected call of ListLogsExecute.
func (mr *MockDefaultAPIMockRecorder) ListLogsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogsExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListLogsExecute), r)
}

// ListModules mocks base method.
func (m *MockDefaultAPI) ListModules(ctx context.Context, organizationId, stackId string) sdk.ApiListModulesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModules", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiListModulesRequest)
	return ret0
}

// ListModules indicates an expected call of ListModules.
func (mr *MockDefaultAPIMockRecorder) ListModules(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModules", reflect.TypeOf((*MockDefaultAPI)(nil).ListModules), ctx, organizationId, stackId)
}

// ListModulesExecute mocks base method.
func (m *MockDefaultAPI) ListModulesExecute(r sdk.ApiListModulesRequest) (*sdk.ListModulesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModulesExecute", r)
	ret0, _ := ret[0].(*sdk.ListModulesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListModulesExecute indicates an expected call of ListModulesExecute.
func (mr *MockDefaultAPIMockRecorder) ListModulesExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModulesExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListModulesExecute), r)
}

// ListOrganizationInvitations mocks base method.
func (m *MockDefaultAPI) ListOrganizationInvitations(ctx context.Context, organizationId string) sdk.ApiListOrganizationInvitationsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationInvitations", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiListOrganizationInvitationsRequest)
	return ret0
}

// ListOrganizationInvitations indicates an expected call of ListOrganizationInvitations.
func (mr *MockDefaultAPIMockRecorder) ListOrganizationInvitations(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationInvitations", reflect.TypeOf((*MockDefaultAPI)(nil).ListOrganizationInvitations), ctx, organizationId)
}

// ListOrganizationInvitationsExecute mocks base method.
func (m *MockDefaultAPI) ListOrganizationInvitationsExecute(r sdk.ApiListOrganizationInvitationsRequest) (*sdk.ListInvitationsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationInvitationsExecute", r)
	ret0, _ := ret[0].(*sdk.ListInvitationsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationInvitationsExecute indicates an expected call of ListOrganizationInvitationsExecute.
func (mr *MockDefaultAPIMockRecorder) ListOrganizationInvitationsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationInvitationsExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListOrganizationInvitationsExecute), r)
}

// ListOrganizations mocks base method.
func (m *MockDefaultAPI) ListOrganizations(ctx context.Context) sdk.ApiListOrganizationsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", ctx)
	ret0, _ := ret[0].(sdk.ApiListOrganizationsRequest)
	return ret0
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockDefaultAPIMockRecorder) ListOrganizations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockDefaultAPI)(nil).ListOrganizations), ctx)
}

// ListOrganizationsExecute mocks base method.
func (m *MockDefaultAPI) ListOrganizationsExecute(r sdk.ApiListOrganizationsRequest) (*sdk.ListOrganizationExpandedResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationsExecute", r)
	ret0, _ := ret[0].(*sdk.ListOrganizationExpandedResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationsExecute indicates an expected call of ListOrganizationsExecute.
func (mr *MockDefaultAPIMockRecorder) ListOrganizationsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationsExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListOrganizationsExecute), r)
}

// ListOrganizationsExpanded mocks base method.
func (m *MockDefaultAPI) ListOrganizationsExpanded(ctx context.Context) sdk.ApiListOrganizationsExpandedRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationsExpanded", ctx)
	ret0, _ := ret[0].(sdk.ApiListOrganizationsExpandedRequest)
	return ret0
}

// ListOrganizationsExpanded indicates an expected call of ListOrganizationsExpanded.
func (mr *MockDefaultAPIMockRecorder) ListOrganizationsExpanded(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationsExpanded", reflect.TypeOf((*MockDefaultAPI)(nil).ListOrganizationsExpanded), ctx)
}

// ListOrganizationsExpandedExecute mocks base method.
func (m *MockDefaultAPI) ListOrganizationsExpandedExecute(r sdk.ApiListOrganizationsExpandedRequest) (*sdk.ListOrganizationExpandedResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationsExpandedExecute", r)
	ret0, _ := ret[0].(*sdk.ListOrganizationExpandedResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationsExpandedExecute indicates an expected call of ListOrganizationsExpandedExecute.
func (mr *MockDefaultAPIMockRecorder) ListOrganizationsExpandedExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationsExpandedExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListOrganizationsExpandedExecute), r)
}

// ListRegions mocks base method.
func (m *MockDefaultAPI) ListRegions(ctx context.Context, organizationId string) sdk.ApiListRegionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegions", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiListRegionsRequest)
	return ret0
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockDefaultAPIMockRecorder) ListRegions(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockDefaultAPI)(nil).ListRegions), ctx, organizationId)
}

// ListRegionsExecute mocks base method.
func (m *MockDefaultAPI) ListRegionsExecute(r sdk.ApiListRegionsRequest) (*sdk.ListRegionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegionsExecute", r)
	ret0, _ := ret[0].(*sdk.ListRegionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRegionsExecute indicates an expected call of ListRegionsExecute.
func (mr *MockDefaultAPIMockRecorder) ListRegionsExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegionsExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListRegionsExecute), r)
}

// ListStackUsersAccesses mocks base method.
func (m *MockDefaultAPI) ListStackUsersAccesses(ctx context.Context, organizationId, stackId string) sdk.ApiListStackUsersAccessesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStackUsersAccesses", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiListStackUsersAccessesRequest)
	return ret0
}

// ListStackUsersAccesses indicates an expected call of ListStackUsersAccesses.
func (mr *MockDefaultAPIMockRecorder) ListStackUsersAccesses(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackUsersAccesses", reflect.TypeOf((*MockDefaultAPI)(nil).ListStackUsersAccesses), ctx, organizationId, stackId)
}

// ListStackUsersAccessesExecute mocks base method.
func (m *MockDefaultAPI) ListStackUsersAccessesExecute(r sdk.ApiListStackUsersAccessesRequest) (*sdk.StackUserAccessResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStackUsersAccessesExecute", r)
	ret0, _ := ret[0].(*sdk.StackUserAccessResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStackUsersAccessesExecute indicates an expected call of ListStackUsersAccessesExecute.
func (mr *MockDefaultAPIMockRecorder) ListStackUsersAccessesExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackUsersAccessesExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListStackUsersAccessesExecute), r)
}

// ListStacks mocks base method.
func (m *MockDefaultAPI) ListStacks(ctx context.Context, organizationId string) sdk.ApiListStacksRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStacks", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiListStacksRequest)
	return ret0
}

// ListStacks indicates an expected call of ListStacks.
func (mr *MockDefaultAPIMockRecorder) ListStacks(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStacks", reflect.TypeOf((*MockDefaultAPI)(nil).ListStacks), ctx, organizationId)
}

// ListStacksExecute mocks base method.
func (m *MockDefaultAPI) ListStacksExecute(r sdk.ApiListStacksRequest) (*sdk.ListStacksResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStacksExecute", r)
	ret0, _ := ret[0].(*sdk.ListStacksResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStacksExecute indicates an expected call of ListStacksExecute.
func (mr *MockDefaultAPIMockRecorder) ListStacksExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStacksExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListStacksExecute), r)
}

// ListUsersOfOrganization mocks base method.
func (m *MockDefaultAPI) ListUsersOfOrganization(ctx context.Context, organizationId string) sdk.ApiListUsersOfOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersOfOrganization", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiListUsersOfOrganizationRequest)
	return ret0
}

// ListUsersOfOrganization indicates an expected call of ListUsersOfOrganization.
func (mr *MockDefaultAPIMockRecorder) ListUsersOfOrganization(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersOfOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).ListUsersOfOrganization), ctx, organizationId)
}

// ListUsersOfOrganizationExecute mocks base method.
func (m *MockDefaultAPI) ListUsersOfOrganizationExecute(r sdk.ApiListUsersOfOrganizationRequest) (*sdk.ListUsersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersOfOrganizationExecute", r)
	ret0, _ := ret[0].(*sdk.ListUsersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsersOfOrganizationExecute indicates an expected call of ListUsersOfOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) ListUsersOfOrganizationExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersOfOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ListUsersOfOrganizationExecute), r)
}

// ReadConnectedUser mocks base method.
func (m *MockDefaultAPI) ReadConnectedUser(ctx context.Context) sdk.ApiReadConnectedUserRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConnectedUser", ctx)
	ret0, _ := ret[0].(sdk.ApiReadConnectedUserRequest)
	return ret0
}

// ReadConnectedUser indicates an expected call of ReadConnectedUser.
func (mr *MockDefaultAPIMockRecorder) ReadConnectedUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConnectedUser", reflect.TypeOf((*MockDefaultAPI)(nil).ReadConnectedUser), ctx)
}

// ReadConnectedUserExecute mocks base method.
func (m *MockDefaultAPI) ReadConnectedUserExecute(r sdk.ApiReadConnectedUserRequest) (*sdk.ReadUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConnectedUserExecute", r)
	ret0, _ := ret[0].(*sdk.ReadUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadConnectedUserExecute indicates an expected call of ReadConnectedUserExecute.
func (mr *MockDefaultAPIMockRecorder) ReadConnectedUserExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConnectedUserExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ReadConnectedUserExecute), r)
}

// ReadOrganization mocks base method.
func (m *MockDefaultAPI) ReadOrganization(ctx context.Context, organizationId string) sdk.ApiReadOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOrganization", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiReadOrganizationRequest)
	return ret0
}

// ReadOrganization indicates an expected call of ReadOrganization.
func (mr *MockDefaultAPIMockRecorder) ReadOrganization(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).ReadOrganization), ctx, organizationId)
}

// ReadOrganizationExecute mocks base method.
func (m *MockDefaultAPI) ReadOrganizationExecute(r sdk.ApiReadOrganizationRequest) (*sdk.ReadOrganizationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOrganizationExecute", r)
	ret0, _ := ret[0].(*sdk.ReadOrganizationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadOrganizationExecute indicates an expected call of ReadOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) ReadOrganizationExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ReadOrganizationExecute), r)
}

// ReadStackUserAccess mocks base method.
func (m *MockDefaultAPI) ReadStackUserAccess(ctx context.Context, organizationId, stackId, userId string) sdk.ApiReadStackUserAccessRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStackUserAccess", ctx, organizationId, stackId, userId)
	ret0, _ := ret[0].(sdk.ApiReadStackUserAccessRequest)
	return ret0
}

// ReadStackUserAccess indicates an expected call of ReadStackUserAccess.
func (mr *MockDefaultAPIMockRecorder) ReadStackUserAccess(ctx, organizationId, stackId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStackUserAccess", reflect.TypeOf((*MockDefaultAPI)(nil).ReadStackUserAccess), ctx, organizationId, stackId, userId)
}

// ReadStackUserAccessExecute mocks base method.
func (m *MockDefaultAPI) ReadStackUserAccessExecute(r sdk.ApiReadStackUserAccessRequest) (*sdk.ReadStackUserAccess, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStackUserAccessExecute", r)
	ret0, _ := ret[0].(*sdk.ReadStackUserAccess)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadStackUserAccessExecute indicates an expected call of ReadStackUserAccessExecute.
func (mr *MockDefaultAPIMockRecorder) ReadStackUserAccessExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStackUserAccessExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ReadStackUserAccessExecute), r)
}

// ReadUserOfOrganization mocks base method.
func (m *MockDefaultAPI) ReadUserOfOrganization(ctx context.Context, organizationId, userId string) sdk.ApiReadUserOfOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserOfOrganization", ctx, organizationId, userId)
	ret0, _ := ret[0].(sdk.ApiReadUserOfOrganizationRequest)
	return ret0
}

// ReadUserOfOrganization indicates an expected call of ReadUserOfOrganization.
func (mr *MockDefaultAPIMockRecorder) ReadUserOfOrganization(ctx, organizationId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserOfOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).ReadUserOfOrganization), ctx, organizationId, userId)
}

// ReadUserOfOrganizationExecute mocks base method.
func (m *MockDefaultAPI) ReadUserOfOrganizationExecute(r sdk.ApiReadUserOfOrganizationRequest) (*sdk.ReadOrganizationUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserOfOrganizationExecute", r)
	ret0, _ := ret[0].(*sdk.ReadOrganizationUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadUserOfOrganizationExecute indicates an expected call of ReadUserOfOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) ReadUserOfOrganizationExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserOfOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).ReadUserOfOrganizationExecute), r)
}

// RestoreStack mocks base method.
func (m *MockDefaultAPI) RestoreStack(ctx context.Context, organizationId, stackId string) sdk.ApiRestoreStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiRestoreStackRequest)
	return ret0
}

// RestoreStack indicates an expected call of RestoreStack.
func (mr *MockDefaultAPIMockRecorder) RestoreStack(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreStack", reflect.TypeOf((*MockDefaultAPI)(nil).RestoreStack), ctx, organizationId, stackId)
}

// RestoreStackExecute mocks base method.
func (m *MockDefaultAPI) RestoreStackExecute(r sdk.ApiRestoreStackRequest) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreStackExecute", r)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RestoreStackExecute indicates an expected call of RestoreStackExecute.
func (mr *MockDefaultAPIMockRecorder) RestoreStackExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).RestoreStackExecute), r)
}

// UpdateOrganization mocks base method.
func (m *MockDefaultAPI) UpdateOrganization(ctx context.Context, organizationId string) sdk.ApiUpdateOrganizationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", ctx, organizationId)
	ret0, _ := ret[0].(sdk.ApiUpdateOrganizationRequest)
	return ret0
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockDefaultAPIMockRecorder) UpdateOrganization(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockDefaultAPI)(nil).UpdateOrganization), ctx, organizationId)
}

// UpdateOrganizationExecute mocks base method.
func (m *MockDefaultAPI) UpdateOrganizationExecute(r sdk.ApiUpdateOrganizationRequest) (*sdk.ReadOrganizationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationExecute", r)
	ret0, _ := ret[0].(*sdk.ReadOrganizationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateOrganizationExecute indicates an expected call of UpdateOrganizationExecute.
func (mr *MockDefaultAPIMockRecorder) UpdateOrganizationExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationExecute", reflect.TypeOf((*MockDefaultAPI)(nil).UpdateOrganizationExecute), r)
}

// UpdateStack mocks base method.
func (m *MockDefaultAPI) UpdateStack(ctx context.Context, organizationId, stackId string) sdk.ApiUpdateStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiUpdateStackRequest)
	return ret0
}

// UpdateStack indicates an expected call of UpdateStack.
func (mr *MockDefaultAPIMockRecorder) UpdateStack(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStack", reflect.TypeOf((*MockDefaultAPI)(nil).UpdateStack), ctx, organizationId, stackId)
}

// UpdateStackExecute mocks base method.
func (m *MockDefaultAPI) UpdateStackExecute(r sdk.ApiUpdateStackRequest) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStackExecute", r)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateStackExecute indicates an expected call of UpdateStackExecute.
func (mr *MockDefaultAPIMockRecorder) UpdateStackExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).UpdateStackExecute), r)
}

// UpgradeStack mocks base method.
func (m *MockDefaultAPI) UpgradeStack(ctx context.Context, organizationId, stackId string) sdk.ApiUpgradeStackRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeStack", ctx, organizationId, stackId)
	ret0, _ := ret[0].(sdk.ApiUpgradeStackRequest)
	return ret0
}

// UpgradeStack indicates an expected call of UpgradeStack.
func (mr *MockDefaultAPIMockRecorder) UpgradeStack(ctx, organizationId, stackId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeStack", reflect.TypeOf((*MockDefaultAPI)(nil).UpgradeStack), ctx, organizationId, stackId)
}

// UpgradeStackExecute mocks base method.
func (m *MockDefaultAPI) UpgradeStackExecute(r sdk.ApiUpgradeStackRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeStackExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeStackExecute indicates an expected call of UpgradeStackExecute.
func (mr *MockDefaultAPIMockRecorder) UpgradeStackExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeStackExecute", reflect.TypeOf((*MockDefaultAPI)(nil).UpgradeStackExecute), r)
}

// UpsertOrganizationUser mocks base method.
func (m *MockDefaultAPI) UpsertOrganizationUser(ctx context.Context, organizationId, userId string) sdk.ApiUpsertOrganizationUserRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOrganizationUser", ctx, organizationId, userId)
	ret0, _ := ret[0].(sdk.ApiUpsertOrganizationUserRequest)
	return ret0
}

// UpsertOrganizationUser indicates an expected call of UpsertOrganizationUser.
func (mr *MockDefaultAPIMockRecorder) UpsertOrganizationUser(ctx, organizationId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOrganizationUser", reflect.TypeOf((*MockDefaultAPI)(nil).UpsertOrganizationUser), ctx, organizationId, userId)
}

// UpsertOrganizationUserExecute mocks base method.
func (m *MockDefaultAPI) UpsertOrganizationUserExecute(r sdk.ApiUpsertOrganizationUserRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOrganizationUserExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertOrganizationUserExecute indicates an expected call of UpsertOrganizationUserExecute.
func (mr *MockDefaultAPIMockRecorder) UpsertOrganizationUserExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOrganizationUserExecute", reflect.TypeOf((*MockDefaultAPI)(nil).UpsertOrganizationUserExecute), r)
}

// UpsertStackUserAccess mocks base method.
func (m *MockDefaultAPI) UpsertStackUserAccess(ctx context.Context, organizationId, stackId, userId string) sdk.ApiUpsertStackUserAccessRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertStackUserAccess", ctx, organizationId, stackId, userId)
	ret0, _ := ret[0].(sdk.ApiUpsertStackUserAccessRequest)
	return ret0
}

// UpsertStackUserAccess indicates an expected call of UpsertStackUserAccess.
func (mr *MockDefaultAPIMockRecorder) UpsertStackUserAccess(ctx, organizationId, stackId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStackUserAccess", reflect.TypeOf((*MockDefaultAPI)(nil).UpsertStackUserAccess), ctx, organizationId, stackId, userId)
}

// UpsertStackUserAccessExecute mocks base method.
func (m *MockDefaultAPI) UpsertStackUserAccessExecute(r sdk.ApiUpsertStackUserAccessRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertStackUserAccessExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertStackUserAccessExecute indicates an expected call of UpsertStackUserAccessExecute.
func (mr *MockDefaultAPIMockRecorder) UpsertStackUserAccessExecute(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStackUserAccessExecute", reflect.TypeOf((*MockDefaultAPI)(nil).UpsertStackUserAccessExecute), r)
}
