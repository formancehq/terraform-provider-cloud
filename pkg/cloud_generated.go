// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/formancehq/terraform-provider-cloud/pkg (interfaces: CloudSDK)
//
// Generated by this command:
//
//	mockgen -destination=cloud_generated.go -package=pkg . CloudSDK
//

// Package pkg is a generated GoMock package.
package pkg

import (
	context "context"
	http "net/http"
	reflect "reflect"

	sdk "github.com/formancehq/terraform-provider-cloud/sdk"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudSDK is a mock of CloudSDK interface.
type MockCloudSDK struct {
	ctrl     *gomock.Controller
	recorder *MockCloudSDKMockRecorder
	isgomock struct{}
}

// MockCloudSDKMockRecorder is the mock recorder for MockCloudSDK.
type MockCloudSDKMockRecorder struct {
	mock *MockCloudSDK
}

// NewMockCloudSDK creates a new mock instance.
func NewMockCloudSDK(ctrl *gomock.Controller) *MockCloudSDK {
	mock := &MockCloudSDK{ctrl: ctrl}
	mock.recorder = &MockCloudSDKMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudSDK) EXPECT() *MockCloudSDKMockRecorder {
	return m.recorder
}

// CreateInvitation mocks base method.
func (m *MockCloudSDK) CreateInvitation(ctx context.Context, organizationID, email string, invitationClaim sdk.InvitationClaim) (*sdk.CreateInvitationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitation", ctx, organizationID, email, invitationClaim)
	ret0, _ := ret[0].(*sdk.CreateInvitationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockCloudSDKMockRecorder) CreateInvitation(ctx, organizationID, email, invitationClaim any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockCloudSDK)(nil).CreateInvitation), ctx, organizationID, email, invitationClaim)
}

// CreateStack mocks base method.
func (m *MockCloudSDK) CreateStack(ctx context.Context, organizationID string, body sdk.CreateStackRequest) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStack", ctx, organizationID, body)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateStack indicates an expected call of CreateStack.
func (mr *MockCloudSDKMockRecorder) CreateStack(ctx, organizationID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStack", reflect.TypeOf((*MockCloudSDK)(nil).CreateStack), ctx, organizationID, body)
}

// DeleteInvitation mocks base method.
func (m *MockCloudSDK) DeleteInvitation(ctx context.Context, organizationID, invitationID string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitation", ctx, organizationID, invitationID)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitation indicates an expected call of DeleteInvitation.
func (mr *MockCloudSDKMockRecorder) DeleteInvitation(ctx, organizationID, invitationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitation", reflect.TypeOf((*MockCloudSDK)(nil).DeleteInvitation), ctx, organizationID, invitationID)
}

// DeleteStack mocks base method.
func (m *MockCloudSDK) DeleteStack(ctx context.Context, organizationID, stackID string, force bool) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStack", ctx, organizationID, stackID, force)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStack indicates an expected call of DeleteStack.
func (mr *MockCloudSDKMockRecorder) DeleteStack(ctx, organizationID, stackID, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStack", reflect.TypeOf((*MockCloudSDK)(nil).DeleteStack), ctx, organizationID, stackID, force)
}

// DeleteStackUserAccess mocks base method.
func (m *MockCloudSDK) DeleteStackUserAccess(ctx context.Context, organizationID, stackID, userId string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStackUserAccess", ctx, organizationID, stackID, userId)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStackUserAccess indicates an expected call of DeleteStackUserAccess.
func (mr *MockCloudSDKMockRecorder) DeleteStackUserAccess(ctx, organizationID, stackID, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackUserAccess", reflect.TypeOf((*MockCloudSDK)(nil).DeleteStackUserAccess), ctx, organizationID, stackID, userId)
}

// DeleteUserOfOrganization mocks base method.
func (m *MockCloudSDK) DeleteUserOfOrganization(ctx context.Context, organizationID, userID string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserOfOrganization", ctx, organizationID, userID)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserOfOrganization indicates an expected call of DeleteUserOfOrganization.
func (mr *MockCloudSDKMockRecorder) DeleteUserOfOrganization(ctx, organizationID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserOfOrganization", reflect.TypeOf((*MockCloudSDK)(nil).DeleteUserOfOrganization), ctx, organizationID, userID)
}

// DisableModule mocks base method.
func (m *MockCloudSDK) DisableModule(ctx context.Context, organizationID, stackID, moduleName string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableModule", ctx, organizationID, stackID, moduleName)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableModule indicates an expected call of DisableModule.
func (mr *MockCloudSDKMockRecorder) DisableModule(ctx, organizationID, stackID, moduleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableModule", reflect.TypeOf((*MockCloudSDK)(nil).DisableModule), ctx, organizationID, stackID, moduleName)
}

// EnableModule mocks base method.
func (m *MockCloudSDK) EnableModule(ctx context.Context, organizationID, stackID, moduleName string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableModule", ctx, organizationID, stackID, moduleName)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableModule indicates an expected call of EnableModule.
func (mr *MockCloudSDKMockRecorder) EnableModule(ctx, organizationID, stackID, moduleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableModule", reflect.TypeOf((*MockCloudSDK)(nil).EnableModule), ctx, organizationID, stackID, moduleName)
}

// GetRegion mocks base method.
func (m *MockCloudSDK) GetRegion(ctx context.Context, organizationID, regionID string) (*sdk.GetRegionResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", ctx, organizationID, regionID)
	ret0, _ := ret[0].(*sdk.GetRegionResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockCloudSDKMockRecorder) GetRegion(ctx, organizationID, regionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockCloudSDK)(nil).GetRegion), ctx, organizationID, regionID)
}

// GetRegionVersions mocks base method.
func (m *MockCloudSDK) GetRegionVersions(ctx context.Context, organizationID, regionID string) (*sdk.GetRegionVersionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionVersions", ctx, organizationID, regionID)
	ret0, _ := ret[0].(*sdk.GetRegionVersionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegionVersions indicates an expected call of GetRegionVersions.
func (mr *MockCloudSDKMockRecorder) GetRegionVersions(ctx, organizationID, regionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionVersions", reflect.TypeOf((*MockCloudSDK)(nil).GetRegionVersions), ctx, organizationID, regionID)
}

// ListModules mocks base method.
func (m *MockCloudSDK) ListModules(ctx context.Context, organizationID, stackID string) (*sdk.ListModulesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModules", ctx, organizationID, stackID)
	ret0, _ := ret[0].(*sdk.ListModulesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListModules indicates an expected call of ListModules.
func (mr *MockCloudSDKMockRecorder) ListModules(ctx, organizationID, stackID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModules", reflect.TypeOf((*MockCloudSDK)(nil).ListModules), ctx, organizationID, stackID)
}

// ListOrganizationInvitations mocks base method.
func (m *MockCloudSDK) ListOrganizationInvitations(ctx context.Context, organizationID string) (*sdk.ListInvitationsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationInvitations", ctx, organizationID)
	ret0, _ := ret[0].(*sdk.ListInvitationsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationInvitations indicates an expected call of ListOrganizationInvitations.
func (mr *MockCloudSDKMockRecorder) ListOrganizationInvitations(ctx, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationInvitations", reflect.TypeOf((*MockCloudSDK)(nil).ListOrganizationInvitations), ctx, organizationID)
}

// ListRegions mocks base method.
func (m *MockCloudSDK) ListRegions(ctx context.Context, organizationID string) (*sdk.ListRegionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegions", ctx, organizationID)
	ret0, _ := ret[0].(*sdk.ListRegionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockCloudSDKMockRecorder) ListRegions(ctx, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockCloudSDK)(nil).ListRegions), ctx, organizationID)
}

// ListStacks mocks base method.
func (m *MockCloudSDK) ListStacks(ctx context.Context, organizationID string) (*sdk.ListStacksResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStacks", ctx, organizationID)
	ret0, _ := ret[0].(*sdk.ListStacksResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStacks indicates an expected call of ListStacks.
func (mr *MockCloudSDKMockRecorder) ListStacks(ctx, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStacks", reflect.TypeOf((*MockCloudSDK)(nil).ListStacks), ctx, organizationID)
}

// ReadOrganization mocks base method.
func (m *MockCloudSDK) ReadOrganization(ctx context.Context, organizationID string) (*sdk.ReadOrganizationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOrganization", ctx, organizationID)
	ret0, _ := ret[0].(*sdk.ReadOrganizationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadOrganization indicates an expected call of ReadOrganization.
func (mr *MockCloudSDKMockRecorder) ReadOrganization(ctx, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrganization", reflect.TypeOf((*MockCloudSDK)(nil).ReadOrganization), ctx, organizationID)
}

// ReadStack mocks base method.
func (m *MockCloudSDK) ReadStack(ctx context.Context, organizationID, stackID string) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStack", ctx, organizationID, stackID)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadStack indicates an expected call of ReadStack.
func (mr *MockCloudSDKMockRecorder) ReadStack(ctx, organizationID, stackID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStack", reflect.TypeOf((*MockCloudSDK)(nil).ReadStack), ctx, organizationID, stackID)
}

// ReadStackUserAccess mocks base method.
func (m *MockCloudSDK) ReadStackUserAccess(ctx context.Context, organizationID, stackID, userId string) (*sdk.ReadStackUserAccess, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStackUserAccess", ctx, organizationID, stackID, userId)
	ret0, _ := ret[0].(*sdk.ReadStackUserAccess)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadStackUserAccess indicates an expected call of ReadStackUserAccess.
func (mr *MockCloudSDKMockRecorder) ReadStackUserAccess(ctx, organizationID, stackID, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStackUserAccess", reflect.TypeOf((*MockCloudSDK)(nil).ReadStackUserAccess), ctx, organizationID, stackID, userId)
}

// ReadUserOfOrganization mocks base method.
func (m *MockCloudSDK) ReadUserOfOrganization(ctx context.Context, organizationID, userID string) (*sdk.ReadOrganizationUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserOfOrganization", ctx, organizationID, userID)
	ret0, _ := ret[0].(*sdk.ReadOrganizationUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadUserOfOrganization indicates an expected call of ReadUserOfOrganization.
func (mr *MockCloudSDKMockRecorder) ReadUserOfOrganization(ctx, organizationID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserOfOrganization", reflect.TypeOf((*MockCloudSDK)(nil).ReadUserOfOrganization), ctx, organizationID, userID)
}

// UpdateStack mocks base method.
func (m *MockCloudSDK) UpdateStack(ctx context.Context, organizationID, stackID string, body sdk.UpdateStackRequest) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStack", ctx, organizationID, stackID, body)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateStack indicates an expected call of UpdateStack.
func (mr *MockCloudSDKMockRecorder) UpdateStack(ctx, organizationID, stackID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStack", reflect.TypeOf((*MockCloudSDK)(nil).UpdateStack), ctx, organizationID, stackID, body)
}

// UpgradeStack mocks base method.
func (m *MockCloudSDK) UpgradeStack(ctx context.Context, organizationID, stackID, version string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeStack", ctx, organizationID, stackID, version)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeStack indicates an expected call of UpgradeStack.
func (mr *MockCloudSDKMockRecorder) UpgradeStack(ctx, organizationID, stackID, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeStack", reflect.TypeOf((*MockCloudSDK)(nil).UpgradeStack), ctx, organizationID, stackID, version)
}

// UpsertStackUserAccess mocks base method.
func (m *MockCloudSDK) UpsertStackUserAccess(ctx context.Context, organizationID, stackID, userId string, body sdk.UpdateStackUserRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertStackUserAccess", ctx, organizationID, stackID, userId, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertStackUserAccess indicates an expected call of UpsertStackUserAccess.
func (mr *MockCloudSDKMockRecorder) UpsertStackUserAccess(ctx, organizationID, stackID, userId, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStackUserAccess", reflect.TypeOf((*MockCloudSDK)(nil).UpsertStackUserAccess), ctx, organizationID, stackID, userId, body)
}

// UpsertUserOfOrganization mocks base method.
func (m *MockCloudSDK) UpsertUserOfOrganization(ctx context.Context, organizationID, userID string, body sdk.UpdateOrganizationUserRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserOfOrganization", ctx, organizationID, userID, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUserOfOrganization indicates an expected call of UpsertUserOfOrganization.
func (mr *MockCloudSDKMockRecorder) UpsertUserOfOrganization(ctx, organizationID, userID, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserOfOrganization", reflect.TypeOf((*MockCloudSDK)(nil).UpsertUserOfOrganization), ctx, organizationID, userID, body)
}
