// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/formancehq/terraform-provider-cloud/pkg (interfaces: CloudSDK)
//
// Generated by this command:
//
//	mockgen -typed -destination=cloud_generated.go -package=pkg . CloudSDK
//

// Package pkg is a generated GoMock package.
package pkg

import (
	context "context"
	http "net/http"
	reflect "reflect"

	sdk "github.com/formancehq/terraform-provider-cloud/sdk"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudSDK is a mock of CloudSDK interface.
type MockCloudSDK struct {
	ctrl     *gomock.Controller
	recorder *MockCloudSDKMockRecorder
	isgomock struct{}
}

// MockCloudSDKMockRecorder is the mock recorder for MockCloudSDK.
type MockCloudSDKMockRecorder struct {
	mock *MockCloudSDK
}

// NewMockCloudSDK creates a new mock instance.
func NewMockCloudSDK(ctrl *gomock.Controller) *MockCloudSDK {
	mock := &MockCloudSDK{ctrl: ctrl}
	mock.recorder = &MockCloudSDKMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudSDK) EXPECT() *MockCloudSDKMockRecorder {
	return m.recorder
}

// CreateInvitation mocks base method.
func (m *MockCloudSDK) CreateInvitation(ctx context.Context, organizationID, email string, invitationClaim sdk.InvitationClaim) (*sdk.CreateInvitationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitation", ctx, organizationID, email, invitationClaim)
	ret0, _ := ret[0].(*sdk.CreateInvitationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockCloudSDKMockRecorder) CreateInvitation(ctx, organizationID, email, invitationClaim any) *MockCloudSDKCreateInvitationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockCloudSDK)(nil).CreateInvitation), ctx, organizationID, email, invitationClaim)
	return &MockCloudSDKCreateInvitationCall{Call: call}
}

// MockCloudSDKCreateInvitationCall wrap *gomock.Call
type MockCloudSDKCreateInvitationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKCreateInvitationCall) Return(arg0 *sdk.CreateInvitationResponse, arg1 *http.Response, arg2 error) *MockCloudSDKCreateInvitationCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKCreateInvitationCall) Do(f func(context.Context, string, string, sdk.InvitationClaim) (*sdk.CreateInvitationResponse, *http.Response, error)) *MockCloudSDKCreateInvitationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKCreateInvitationCall) DoAndReturn(f func(context.Context, string, string, sdk.InvitationClaim) (*sdk.CreateInvitationResponse, *http.Response, error)) *MockCloudSDKCreateInvitationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateStack mocks base method.
func (m *MockCloudSDK) CreateStack(ctx context.Context, organizationID string, body sdk.CreateStackRequest) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStack", ctx, organizationID, body)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateStack indicates an expected call of CreateStack.
func (mr *MockCloudSDKMockRecorder) CreateStack(ctx, organizationID, body any) *MockCloudSDKCreateStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStack", reflect.TypeOf((*MockCloudSDK)(nil).CreateStack), ctx, organizationID, body)
	return &MockCloudSDKCreateStackCall{Call: call}
}

// MockCloudSDKCreateStackCall wrap *gomock.Call
type MockCloudSDKCreateStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKCreateStackCall) Return(arg0 *sdk.CreateStackResponse, arg1 *http.Response, arg2 error) *MockCloudSDKCreateStackCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKCreateStackCall) Do(f func(context.Context, string, sdk.CreateStackRequest) (*sdk.CreateStackResponse, *http.Response, error)) *MockCloudSDKCreateStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKCreateStackCall) DoAndReturn(f func(context.Context, string, sdk.CreateStackRequest) (*sdk.CreateStackResponse, *http.Response, error)) *MockCloudSDKCreateStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInvitation mocks base method.
func (m *MockCloudSDK) DeleteInvitation(ctx context.Context, organizationID, invitationID string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitation", ctx, organizationID, invitationID)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitation indicates an expected call of DeleteInvitation.
func (mr *MockCloudSDKMockRecorder) DeleteInvitation(ctx, organizationID, invitationID any) *MockCloudSDKDeleteInvitationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitation", reflect.TypeOf((*MockCloudSDK)(nil).DeleteInvitation), ctx, organizationID, invitationID)
	return &MockCloudSDKDeleteInvitationCall{Call: call}
}

// MockCloudSDKDeleteInvitationCall wrap *gomock.Call
type MockCloudSDKDeleteInvitationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKDeleteInvitationCall) Return(arg0 *http.Response, arg1 error) *MockCloudSDKDeleteInvitationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKDeleteInvitationCall) Do(f func(context.Context, string, string) (*http.Response, error)) *MockCloudSDKDeleteInvitationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKDeleteInvitationCall) DoAndReturn(f func(context.Context, string, string) (*http.Response, error)) *MockCloudSDKDeleteInvitationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStack mocks base method.
func (m *MockCloudSDK) DeleteStack(ctx context.Context, organizationID, stackID string, force bool) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStack", ctx, organizationID, stackID, force)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStack indicates an expected call of DeleteStack.
func (mr *MockCloudSDKMockRecorder) DeleteStack(ctx, organizationID, stackID, force any) *MockCloudSDKDeleteStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStack", reflect.TypeOf((*MockCloudSDK)(nil).DeleteStack), ctx, organizationID, stackID, force)
	return &MockCloudSDKDeleteStackCall{Call: call}
}

// MockCloudSDKDeleteStackCall wrap *gomock.Call
type MockCloudSDKDeleteStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKDeleteStackCall) Return(arg0 *http.Response, arg1 error) *MockCloudSDKDeleteStackCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKDeleteStackCall) Do(f func(context.Context, string, string, bool) (*http.Response, error)) *MockCloudSDKDeleteStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKDeleteStackCall) DoAndReturn(f func(context.Context, string, string, bool) (*http.Response, error)) *MockCloudSDKDeleteStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStackUserAccess mocks base method.
func (m *MockCloudSDK) DeleteStackUserAccess(ctx context.Context, organizationID, stackID, userId string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStackUserAccess", ctx, organizationID, stackID, userId)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStackUserAccess indicates an expected call of DeleteStackUserAccess.
func (mr *MockCloudSDKMockRecorder) DeleteStackUserAccess(ctx, organizationID, stackID, userId any) *MockCloudSDKDeleteStackUserAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackUserAccess", reflect.TypeOf((*MockCloudSDK)(nil).DeleteStackUserAccess), ctx, organizationID, stackID, userId)
	return &MockCloudSDKDeleteStackUserAccessCall{Call: call}
}

// MockCloudSDKDeleteStackUserAccessCall wrap *gomock.Call
type MockCloudSDKDeleteStackUserAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKDeleteStackUserAccessCall) Return(arg0 *http.Response, arg1 error) *MockCloudSDKDeleteStackUserAccessCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKDeleteStackUserAccessCall) Do(f func(context.Context, string, string, string) (*http.Response, error)) *MockCloudSDKDeleteStackUserAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKDeleteStackUserAccessCall) DoAndReturn(f func(context.Context, string, string, string) (*http.Response, error)) *MockCloudSDKDeleteStackUserAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUserOfOrganization mocks base method.
func (m *MockCloudSDK) DeleteUserOfOrganization(ctx context.Context, organizationID, userID string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserOfOrganization", ctx, organizationID, userID)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserOfOrganization indicates an expected call of DeleteUserOfOrganization.
func (mr *MockCloudSDKMockRecorder) DeleteUserOfOrganization(ctx, organizationID, userID any) *MockCloudSDKDeleteUserOfOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserOfOrganization", reflect.TypeOf((*MockCloudSDK)(nil).DeleteUserOfOrganization), ctx, organizationID, userID)
	return &MockCloudSDKDeleteUserOfOrganizationCall{Call: call}
}

// MockCloudSDKDeleteUserOfOrganizationCall wrap *gomock.Call
type MockCloudSDKDeleteUserOfOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKDeleteUserOfOrganizationCall) Return(arg0 *http.Response, arg1 error) *MockCloudSDKDeleteUserOfOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKDeleteUserOfOrganizationCall) Do(f func(context.Context, string, string) (*http.Response, error)) *MockCloudSDKDeleteUserOfOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKDeleteUserOfOrganizationCall) DoAndReturn(f func(context.Context, string, string) (*http.Response, error)) *MockCloudSDKDeleteUserOfOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisableModule mocks base method.
func (m *MockCloudSDK) DisableModule(ctx context.Context, organizationID, stackID, moduleName string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableModule", ctx, organizationID, stackID, moduleName)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableModule indicates an expected call of DisableModule.
func (mr *MockCloudSDKMockRecorder) DisableModule(ctx, organizationID, stackID, moduleName any) *MockCloudSDKDisableModuleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableModule", reflect.TypeOf((*MockCloudSDK)(nil).DisableModule), ctx, organizationID, stackID, moduleName)
	return &MockCloudSDKDisableModuleCall{Call: call}
}

// MockCloudSDKDisableModuleCall wrap *gomock.Call
type MockCloudSDKDisableModuleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKDisableModuleCall) Return(arg0 *http.Response, arg1 error) *MockCloudSDKDisableModuleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKDisableModuleCall) Do(f func(context.Context, string, string, string) (*http.Response, error)) *MockCloudSDKDisableModuleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKDisableModuleCall) DoAndReturn(f func(context.Context, string, string, string) (*http.Response, error)) *MockCloudSDKDisableModuleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableModule mocks base method.
func (m *MockCloudSDK) EnableModule(ctx context.Context, organizationID, stackID, moduleName string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableModule", ctx, organizationID, stackID, moduleName)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableModule indicates an expected call of EnableModule.
func (mr *MockCloudSDKMockRecorder) EnableModule(ctx, organizationID, stackID, moduleName any) *MockCloudSDKEnableModuleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableModule", reflect.TypeOf((*MockCloudSDK)(nil).EnableModule), ctx, organizationID, stackID, moduleName)
	return &MockCloudSDKEnableModuleCall{Call: call}
}

// MockCloudSDKEnableModuleCall wrap *gomock.Call
type MockCloudSDKEnableModuleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKEnableModuleCall) Return(arg0 *http.Response, arg1 error) *MockCloudSDKEnableModuleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKEnableModuleCall) Do(f func(context.Context, string, string, string) (*http.Response, error)) *MockCloudSDKEnableModuleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKEnableModuleCall) DoAndReturn(f func(context.Context, string, string, string) (*http.Response, error)) *MockCloudSDKEnableModuleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRegion mocks base method.
func (m *MockCloudSDK) GetRegion(ctx context.Context, organizationID, regionID string) (*sdk.GetRegionResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", ctx, organizationID, regionID)
	ret0, _ := ret[0].(*sdk.GetRegionResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockCloudSDKMockRecorder) GetRegion(ctx, organizationID, regionID any) *MockCloudSDKGetRegionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockCloudSDK)(nil).GetRegion), ctx, organizationID, regionID)
	return &MockCloudSDKGetRegionCall{Call: call}
}

// MockCloudSDKGetRegionCall wrap *gomock.Call
type MockCloudSDKGetRegionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKGetRegionCall) Return(arg0 *sdk.GetRegionResponse, arg1 *http.Response, arg2 error) *MockCloudSDKGetRegionCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKGetRegionCall) Do(f func(context.Context, string, string) (*sdk.GetRegionResponse, *http.Response, error)) *MockCloudSDKGetRegionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKGetRegionCall) DoAndReturn(f func(context.Context, string, string) (*sdk.GetRegionResponse, *http.Response, error)) *MockCloudSDKGetRegionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRegionVersions mocks base method.
func (m *MockCloudSDK) GetRegionVersions(ctx context.Context, organizationID, regionID string) (*sdk.GetRegionVersionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionVersions", ctx, organizationID, regionID)
	ret0, _ := ret[0].(*sdk.GetRegionVersionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegionVersions indicates an expected call of GetRegionVersions.
func (mr *MockCloudSDKMockRecorder) GetRegionVersions(ctx, organizationID, regionID any) *MockCloudSDKGetRegionVersionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionVersions", reflect.TypeOf((*MockCloudSDK)(nil).GetRegionVersions), ctx, organizationID, regionID)
	return &MockCloudSDKGetRegionVersionsCall{Call: call}
}

// MockCloudSDKGetRegionVersionsCall wrap *gomock.Call
type MockCloudSDKGetRegionVersionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKGetRegionVersionsCall) Return(arg0 *sdk.GetRegionVersionsResponse, arg1 *http.Response, arg2 error) *MockCloudSDKGetRegionVersionsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKGetRegionVersionsCall) Do(f func(context.Context, string, string) (*sdk.GetRegionVersionsResponse, *http.Response, error)) *MockCloudSDKGetRegionVersionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKGetRegionVersionsCall) DoAndReturn(f func(context.Context, string, string) (*sdk.GetRegionVersionsResponse, *http.Response, error)) *MockCloudSDKGetRegionVersionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModules mocks base method.
func (m *MockCloudSDK) ListModules(ctx context.Context, organizationID, stackID string) (*sdk.ListModulesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModules", ctx, organizationID, stackID)
	ret0, _ := ret[0].(*sdk.ListModulesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListModules indicates an expected call of ListModules.
func (mr *MockCloudSDKMockRecorder) ListModules(ctx, organizationID, stackID any) *MockCloudSDKListModulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModules", reflect.TypeOf((*MockCloudSDK)(nil).ListModules), ctx, organizationID, stackID)
	return &MockCloudSDKListModulesCall{Call: call}
}

// MockCloudSDKListModulesCall wrap *gomock.Call
type MockCloudSDKListModulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKListModulesCall) Return(arg0 *sdk.ListModulesResponse, arg1 *http.Response, arg2 error) *MockCloudSDKListModulesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKListModulesCall) Do(f func(context.Context, string, string) (*sdk.ListModulesResponse, *http.Response, error)) *MockCloudSDKListModulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKListModulesCall) DoAndReturn(f func(context.Context, string, string) (*sdk.ListModulesResponse, *http.Response, error)) *MockCloudSDKListModulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOrganizationInvitations mocks base method.
func (m *MockCloudSDK) ListOrganizationInvitations(ctx context.Context, organizationID string) (*sdk.ListInvitationsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationInvitations", ctx, organizationID)
	ret0, _ := ret[0].(*sdk.ListInvitationsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganizationInvitations indicates an expected call of ListOrganizationInvitations.
func (mr *MockCloudSDKMockRecorder) ListOrganizationInvitations(ctx, organizationID any) *MockCloudSDKListOrganizationInvitationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationInvitations", reflect.TypeOf((*MockCloudSDK)(nil).ListOrganizationInvitations), ctx, organizationID)
	return &MockCloudSDKListOrganizationInvitationsCall{Call: call}
}

// MockCloudSDKListOrganizationInvitationsCall wrap *gomock.Call
type MockCloudSDKListOrganizationInvitationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKListOrganizationInvitationsCall) Return(arg0 *sdk.ListInvitationsResponse, arg1 *http.Response, arg2 error) *MockCloudSDKListOrganizationInvitationsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKListOrganizationInvitationsCall) Do(f func(context.Context, string) (*sdk.ListInvitationsResponse, *http.Response, error)) *MockCloudSDKListOrganizationInvitationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKListOrganizationInvitationsCall) DoAndReturn(f func(context.Context, string) (*sdk.ListInvitationsResponse, *http.Response, error)) *MockCloudSDKListOrganizationInvitationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListRegions mocks base method.
func (m *MockCloudSDK) ListRegions(ctx context.Context, organizationID string) (*sdk.ListRegionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegions", ctx, organizationID)
	ret0, _ := ret[0].(*sdk.ListRegionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockCloudSDKMockRecorder) ListRegions(ctx, organizationID any) *MockCloudSDKListRegionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockCloudSDK)(nil).ListRegions), ctx, organizationID)
	return &MockCloudSDKListRegionsCall{Call: call}
}

// MockCloudSDKListRegionsCall wrap *gomock.Call
type MockCloudSDKListRegionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKListRegionsCall) Return(arg0 *sdk.ListRegionsResponse, arg1 *http.Response, arg2 error) *MockCloudSDKListRegionsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKListRegionsCall) Do(f func(context.Context, string) (*sdk.ListRegionsResponse, *http.Response, error)) *MockCloudSDKListRegionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKListRegionsCall) DoAndReturn(f func(context.Context, string) (*sdk.ListRegionsResponse, *http.Response, error)) *MockCloudSDKListRegionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStacks mocks base method.
func (m *MockCloudSDK) ListStacks(ctx context.Context, organizationID string) (*sdk.ListStacksResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStacks", ctx, organizationID)
	ret0, _ := ret[0].(*sdk.ListStacksResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStacks indicates an expected call of ListStacks.
func (mr *MockCloudSDKMockRecorder) ListStacks(ctx, organizationID any) *MockCloudSDKListStacksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStacks", reflect.TypeOf((*MockCloudSDK)(nil).ListStacks), ctx, organizationID)
	return &MockCloudSDKListStacksCall{Call: call}
}

// MockCloudSDKListStacksCall wrap *gomock.Call
type MockCloudSDKListStacksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKListStacksCall) Return(arg0 *sdk.ListStacksResponse, arg1 *http.Response, arg2 error) *MockCloudSDKListStacksCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKListStacksCall) Do(f func(context.Context, string) (*sdk.ListStacksResponse, *http.Response, error)) *MockCloudSDKListStacksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKListStacksCall) DoAndReturn(f func(context.Context, string) (*sdk.ListStacksResponse, *http.Response, error)) *MockCloudSDKListStacksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadOrganization mocks base method.
func (m *MockCloudSDK) ReadOrganization(ctx context.Context, organizationID string) (*sdk.ReadOrganizationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOrganization", ctx, organizationID)
	ret0, _ := ret[0].(*sdk.ReadOrganizationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadOrganization indicates an expected call of ReadOrganization.
func (mr *MockCloudSDKMockRecorder) ReadOrganization(ctx, organizationID any) *MockCloudSDKReadOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrganization", reflect.TypeOf((*MockCloudSDK)(nil).ReadOrganization), ctx, organizationID)
	return &MockCloudSDKReadOrganizationCall{Call: call}
}

// MockCloudSDKReadOrganizationCall wrap *gomock.Call
type MockCloudSDKReadOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKReadOrganizationCall) Return(arg0 *sdk.ReadOrganizationResponse, arg1 *http.Response, arg2 error) *MockCloudSDKReadOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKReadOrganizationCall) Do(f func(context.Context, string) (*sdk.ReadOrganizationResponse, *http.Response, error)) *MockCloudSDKReadOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKReadOrganizationCall) DoAndReturn(f func(context.Context, string) (*sdk.ReadOrganizationResponse, *http.Response, error)) *MockCloudSDKReadOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadStack mocks base method.
func (m *MockCloudSDK) ReadStack(ctx context.Context, organizationID, stackID string) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStack", ctx, organizationID, stackID)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadStack indicates an expected call of ReadStack.
func (mr *MockCloudSDKMockRecorder) ReadStack(ctx, organizationID, stackID any) *MockCloudSDKReadStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStack", reflect.TypeOf((*MockCloudSDK)(nil).ReadStack), ctx, organizationID, stackID)
	return &MockCloudSDKReadStackCall{Call: call}
}

// MockCloudSDKReadStackCall wrap *gomock.Call
type MockCloudSDKReadStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKReadStackCall) Return(arg0 *sdk.CreateStackResponse, arg1 *http.Response, arg2 error) *MockCloudSDKReadStackCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKReadStackCall) Do(f func(context.Context, string, string) (*sdk.CreateStackResponse, *http.Response, error)) *MockCloudSDKReadStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKReadStackCall) DoAndReturn(f func(context.Context, string, string) (*sdk.CreateStackResponse, *http.Response, error)) *MockCloudSDKReadStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadStackUserAccess mocks base method.
func (m *MockCloudSDK) ReadStackUserAccess(ctx context.Context, organizationID, stackID, userId string) (*sdk.ReadStackUserAccess, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStackUserAccess", ctx, organizationID, stackID, userId)
	ret0, _ := ret[0].(*sdk.ReadStackUserAccess)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadStackUserAccess indicates an expected call of ReadStackUserAccess.
func (mr *MockCloudSDKMockRecorder) ReadStackUserAccess(ctx, organizationID, stackID, userId any) *MockCloudSDKReadStackUserAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStackUserAccess", reflect.TypeOf((*MockCloudSDK)(nil).ReadStackUserAccess), ctx, organizationID, stackID, userId)
	return &MockCloudSDKReadStackUserAccessCall{Call: call}
}

// MockCloudSDKReadStackUserAccessCall wrap *gomock.Call
type MockCloudSDKReadStackUserAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKReadStackUserAccessCall) Return(arg0 *sdk.ReadStackUserAccess, arg1 *http.Response, arg2 error) *MockCloudSDKReadStackUserAccessCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKReadStackUserAccessCall) Do(f func(context.Context, string, string, string) (*sdk.ReadStackUserAccess, *http.Response, error)) *MockCloudSDKReadStackUserAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKReadStackUserAccessCall) DoAndReturn(f func(context.Context, string, string, string) (*sdk.ReadStackUserAccess, *http.Response, error)) *MockCloudSDKReadStackUserAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserOfOrganization mocks base method.
func (m *MockCloudSDK) ReadUserOfOrganization(ctx context.Context, organizationID, userID string) (*sdk.ReadOrganizationUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserOfOrganization", ctx, organizationID, userID)
	ret0, _ := ret[0].(*sdk.ReadOrganizationUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadUserOfOrganization indicates an expected call of ReadUserOfOrganization.
func (mr *MockCloudSDKMockRecorder) ReadUserOfOrganization(ctx, organizationID, userID any) *MockCloudSDKReadUserOfOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserOfOrganization", reflect.TypeOf((*MockCloudSDK)(nil).ReadUserOfOrganization), ctx, organizationID, userID)
	return &MockCloudSDKReadUserOfOrganizationCall{Call: call}
}

// MockCloudSDKReadUserOfOrganizationCall wrap *gomock.Call
type MockCloudSDKReadUserOfOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKReadUserOfOrganizationCall) Return(arg0 *sdk.ReadOrganizationUserResponse, arg1 *http.Response, arg2 error) *MockCloudSDKReadUserOfOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKReadUserOfOrganizationCall) Do(f func(context.Context, string, string) (*sdk.ReadOrganizationUserResponse, *http.Response, error)) *MockCloudSDKReadUserOfOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKReadUserOfOrganizationCall) DoAndReturn(f func(context.Context, string, string) (*sdk.ReadOrganizationUserResponse, *http.Response, error)) *MockCloudSDKReadUserOfOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStack mocks base method.
func (m *MockCloudSDK) UpdateStack(ctx context.Context, organizationID, stackID string, body sdk.UpdateStackRequest) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStack", ctx, organizationID, stackID, body)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateStack indicates an expected call of UpdateStack.
func (mr *MockCloudSDKMockRecorder) UpdateStack(ctx, organizationID, stackID, body any) *MockCloudSDKUpdateStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStack", reflect.TypeOf((*MockCloudSDK)(nil).UpdateStack), ctx, organizationID, stackID, body)
	return &MockCloudSDKUpdateStackCall{Call: call}
}

// MockCloudSDKUpdateStackCall wrap *gomock.Call
type MockCloudSDKUpdateStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKUpdateStackCall) Return(arg0 *sdk.CreateStackResponse, arg1 *http.Response, arg2 error) *MockCloudSDKUpdateStackCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKUpdateStackCall) Do(f func(context.Context, string, string, sdk.UpdateStackRequest) (*sdk.CreateStackResponse, *http.Response, error)) *MockCloudSDKUpdateStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKUpdateStackCall) DoAndReturn(f func(context.Context, string, string, sdk.UpdateStackRequest) (*sdk.CreateStackResponse, *http.Response, error)) *MockCloudSDKUpdateStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeStack mocks base method.
func (m *MockCloudSDK) UpgradeStack(ctx context.Context, organizationID, stackID, version string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeStack", ctx, organizationID, stackID, version)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeStack indicates an expected call of UpgradeStack.
func (mr *MockCloudSDKMockRecorder) UpgradeStack(ctx, organizationID, stackID, version any) *MockCloudSDKUpgradeStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeStack", reflect.TypeOf((*MockCloudSDK)(nil).UpgradeStack), ctx, organizationID, stackID, version)
	return &MockCloudSDKUpgradeStackCall{Call: call}
}

// MockCloudSDKUpgradeStackCall wrap *gomock.Call
type MockCloudSDKUpgradeStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKUpgradeStackCall) Return(arg0 *http.Response, arg1 error) *MockCloudSDKUpgradeStackCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKUpgradeStackCall) Do(f func(context.Context, string, string, string) (*http.Response, error)) *MockCloudSDKUpgradeStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKUpgradeStackCall) DoAndReturn(f func(context.Context, string, string, string) (*http.Response, error)) *MockCloudSDKUpgradeStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertStackUserAccess mocks base method.
func (m *MockCloudSDK) UpsertStackUserAccess(ctx context.Context, organizationID, stackID, userId string, body sdk.UpdateStackUserRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertStackUserAccess", ctx, organizationID, stackID, userId, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertStackUserAccess indicates an expected call of UpsertStackUserAccess.
func (mr *MockCloudSDKMockRecorder) UpsertStackUserAccess(ctx, organizationID, stackID, userId, body any) *MockCloudSDKUpsertStackUserAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStackUserAccess", reflect.TypeOf((*MockCloudSDK)(nil).UpsertStackUserAccess), ctx, organizationID, stackID, userId, body)
	return &MockCloudSDKUpsertStackUserAccessCall{Call: call}
}

// MockCloudSDKUpsertStackUserAccessCall wrap *gomock.Call
type MockCloudSDKUpsertStackUserAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKUpsertStackUserAccessCall) Return(arg0 *http.Response, arg1 error) *MockCloudSDKUpsertStackUserAccessCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKUpsertStackUserAccessCall) Do(f func(context.Context, string, string, string, sdk.UpdateStackUserRequest) (*http.Response, error)) *MockCloudSDKUpsertStackUserAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKUpsertStackUserAccessCall) DoAndReturn(f func(context.Context, string, string, string, sdk.UpdateStackUserRequest) (*http.Response, error)) *MockCloudSDKUpsertStackUserAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertUserOfOrganization mocks base method.
func (m *MockCloudSDK) UpsertUserOfOrganization(ctx context.Context, organizationID, userID string, body sdk.UpdateOrganizationUserRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserOfOrganization", ctx, organizationID, userID, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUserOfOrganization indicates an expected call of UpsertUserOfOrganization.
func (mr *MockCloudSDKMockRecorder) UpsertUserOfOrganization(ctx, organizationID, userID, body any) *MockCloudSDKUpsertUserOfOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserOfOrganization", reflect.TypeOf((*MockCloudSDK)(nil).UpsertUserOfOrganization), ctx, organizationID, userID, body)
	return &MockCloudSDKUpsertUserOfOrganizationCall{Call: call}
}

// MockCloudSDKUpsertUserOfOrganizationCall wrap *gomock.Call
type MockCloudSDKUpsertUserOfOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKUpsertUserOfOrganizationCall) Return(arg0 *http.Response, arg1 error) *MockCloudSDKUpsertUserOfOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKUpsertUserOfOrganizationCall) Do(f func(context.Context, string, string, sdk.UpdateOrganizationUserRequest) (*http.Response, error)) *MockCloudSDKUpsertUserOfOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKUpsertUserOfOrganizationCall) DoAndReturn(f func(context.Context, string, string, sdk.UpdateOrganizationUserRequest) (*http.Response, error)) *MockCloudSDKUpsertUserOfOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
